// Code generated by gen-confs DO NOT EDIT.
package confDevice

import (
	. "confMQTT/internal/pkg/tools"
	. "confMQTT/pkg/confEntry"
)

type Device string

const (
	BinarySensor  Device = "binary_sensor"
	DeviceTrigger Device = "device_trigger"
	Button        Device = "button"
	Sensor        Device = "sensor"
)

func GetDeviceConfig(device Device) (any, bool) {
	if v, ok := map[Device]interface{}{
		BinarySensor:  &DeviceBinarySensor{},
		DeviceTrigger: &DeviceDeviceTrigger{},
		Button:        &DeviceButton{},
		Sensor:        &DeviceSensor{},
	}[device]; ok {
		return v, true
	}
	return nil, false
}

type DeviceBinarySensor struct {
	KeyAvailability           KeyAvailability
	KeyAvailabilityMode       KeyAvailabilityMode
	KeyAvailabilityTemplate   KeyAvailabilityTemplate
	KeyAvailabilityTopic      KeyAvailabilityTopic
	KeyDevice                 KeyDevice
	KeyDeviceClass            KeyDeviceClass
	KeyEnabledByDefault       KeyEnabledByDefault
	KeyEncoding               KeyEncoding
	KeyEntityCategory         KeyEntityCategory
	KeyExpireAfter            KeyExpireAfter
	KeyForceUpdate            KeyForceUpdate
	KeyIcon                   KeyIcon
	KeyJsonAttributesTemplate KeyJsonAttributesTemplate
	KeyJsonAttributesTopic    KeyJsonAttributesTopic
	KeyNameBinarySensor       KeyNameBinarySensor
	KeyObjectId               KeyObjectId
	KeyOffDelay               KeyOffDelay
	KeyPayloadAvailable       KeyPayloadAvailable
	KeyPayloadNotAvailable    KeyPayloadNotAvailable
	KeyPayloadOff             KeyPayloadOff
	KeyPayloadOn              KeyPayloadOn
	KeyQos                    KeyQos
	KeyStateTopic             KeyStateTopic
	KeyUniqueId               KeyUniqueId
	KeyValueTemplate          KeyValueTemplate
}

func (tn *DeviceBinarySensor) MarshalJSON() ([]byte, error) {
	return MarshalBiKeys(
		&PseudoKey[[]ValueAvailability, []ValueAvailability]{K: &tn.KeyAvailability},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityMode},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTemplate},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTopic},
		&PseudoKey[ValueDevice, ValueDevice]{K: &tn.KeyDevice},
		&PseudoKey[string, string]{K: &tn.KeyDeviceClass},
		&PseudoKey[bool, bool]{K: &tn.KeyEnabledByDefault},
		&PseudoKey[string, string]{K: &tn.KeyEncoding},
		&PseudoKey[string, string]{K: &tn.KeyEntityCategory},
		&PseudoKey[int, int]{K: &tn.KeyExpireAfter},
		&PseudoKey[bool, bool]{K: &tn.KeyForceUpdate},
		&PseudoKey[string, string]{K: &tn.KeyIcon},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTemplate},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTopic},
		&PseudoKey[string, string]{K: &tn.KeyNameBinarySensor},
		&PseudoKey[string, string]{K: &tn.KeyObjectId},
		&PseudoKey[int, int]{K: &tn.KeyOffDelay},
		&PseudoKey[string, string]{K: &tn.KeyPayloadAvailable},
		&PseudoKey[string, string]{K: &tn.KeyPayloadNotAvailable},
		&PseudoKey[string, bool]{K: &tn.KeyPayloadOff},
		&PseudoKey[string, bool]{K: &tn.KeyPayloadOn},
		&PseudoKey[byte, byte]{K: &tn.KeyQos},
		&PseudoKey[string, string]{K: &tn.KeyStateTopic},
		&PseudoKey[string, string]{K: &tn.KeyUniqueId},
		&PseudoKey[string, string]{K: &tn.KeyValueTemplate},
	)
}

func (tn *DeviceBinarySensor) UnmarshalJSON(b []byte) error {
	return UnmarshalBiKeys("DeviceBinarySensor", b,
		&PseudoKey[[]ValueAvailability, []ValueAvailability]{K: &tn.KeyAvailability},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityMode},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTemplate},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTopic},
		&PseudoKey[ValueDevice, ValueDevice]{K: &tn.KeyDevice},
		&PseudoKey[string, string]{K: &tn.KeyDeviceClass},
		&PseudoKey[bool, bool]{K: &tn.KeyEnabledByDefault},
		&PseudoKey[string, string]{K: &tn.KeyEncoding},
		&PseudoKey[string, string]{K: &tn.KeyEntityCategory},
		&PseudoKey[int, int]{K: &tn.KeyExpireAfter},
		&PseudoKey[bool, bool]{K: &tn.KeyForceUpdate},
		&PseudoKey[string, string]{K: &tn.KeyIcon},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTemplate},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTopic},
		&PseudoKey[string, string]{K: &tn.KeyNameBinarySensor},
		&PseudoKey[string, string]{K: &tn.KeyObjectId},
		&PseudoKey[int, int]{K: &tn.KeyOffDelay},
		&PseudoKey[string, string]{K: &tn.KeyPayloadAvailable},
		&PseudoKey[string, string]{K: &tn.KeyPayloadNotAvailable},
		&PseudoKey[string, bool]{K: &tn.KeyPayloadOff},
		&PseudoKey[string, bool]{K: &tn.KeyPayloadOn},
		&PseudoKey[byte, byte]{K: &tn.KeyQos},
		&PseudoKey[string, string]{K: &tn.KeyStateTopic},
		&PseudoKey[string, string]{K: &tn.KeyUniqueId},
		&PseudoKey[string, string]{K: &tn.KeyValueTemplate},
	)
}

type DeviceDeviceTrigger struct {
	KeyAutomationType KeyAutomationType
	KeyPayload        KeyPayload
	KeyQos            KeyQos
	KeyTopic          KeyTopic
	KeyType           KeyType
	KeySubtype        KeySubtype
	KeyDeviceRequired KeyDeviceRequired
	KeyValueTemplate  KeyValueTemplate
}

func (tn *DeviceDeviceTrigger) MarshalJSON() ([]byte, error) {
	return MarshalBiKeys(
		&PseudoKey[string, string]{K: &tn.KeyAutomationType},
		&PseudoKey[string, string]{K: &tn.KeyPayload},
		&PseudoKey[byte, byte]{K: &tn.KeyQos},
		&PseudoKey[string, string]{K: &tn.KeyTopic},
		&PseudoKey[string, string]{K: &tn.KeyType},
		&PseudoKey[string, string]{K: &tn.KeySubtype},
		&PseudoKey[ValueDevice, ValueDevice]{K: &tn.KeyDeviceRequired},
		&PseudoKey[string, string]{K: &tn.KeyValueTemplate},
	)
}

func (tn *DeviceDeviceTrigger) UnmarshalJSON(b []byte) error {
	return UnmarshalBiKeys("DeviceDeviceTrigger", b,
		&PseudoKey[string, string]{K: &tn.KeyAutomationType},
		&PseudoKey[string, string]{K: &tn.KeyPayload},
		&PseudoKey[byte, byte]{K: &tn.KeyQos},
		&PseudoKey[string, string]{K: &tn.KeyTopic},
		&PseudoKey[string, string]{K: &tn.KeyType},
		&PseudoKey[string, string]{K: &tn.KeySubtype},
		&PseudoKey[ValueDevice, ValueDevice]{K: &tn.KeyDeviceRequired},
		&PseudoKey[string, string]{K: &tn.KeyValueTemplate},
	)
}

type DeviceButton struct {
	KeyAvailability           KeyAvailability
	KeyAvailabilityMode       KeyAvailabilityMode
	KeyAvailabilityTemplate   KeyAvailabilityTemplate
	KeyAvailabilityTopic      KeyAvailabilityTopic
	KeyCommandTemplate        KeyCommandTemplate
	KeyCommandTopic           KeyCommandTopic
	KeyDevice                 KeyDevice
	KeyDeviceClass            KeyDeviceClass
	KeyEnabledByDefault       KeyEnabledByDefault
	KeyEncoding               KeyEncoding
	KeyEntityCategory         KeyEntityCategory
	KeyIcon                   KeyIcon
	KeyJsonAttributesTemplate KeyJsonAttributesTemplate
	KeyJsonAttributesTopic    KeyJsonAttributesTopic
	KeyNameButton             KeyNameButton
	KeyObjectId               KeyObjectId
	KeyPayloadAvailable       KeyPayloadAvailable
	KeyPayloadNotAvailable    KeyPayloadNotAvailable
	KeyPayloadPress           KeyPayloadPress
	KeyQos                    KeyQos
	KeyRetain                 KeyRetain
	KeyUniqueId               KeyUniqueId
}

func (tn *DeviceButton) MarshalJSON() ([]byte, error) {
	return MarshalBiKeys(
		&PseudoKey[[]ValueAvailability, []ValueAvailability]{K: &tn.KeyAvailability},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityMode},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTemplate},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTopic},
		&PseudoKey[string, string]{K: &tn.KeyCommandTemplate},
		&PseudoKey[string, string]{K: &tn.KeyCommandTopic},
		&PseudoKey[ValueDevice, ValueDevice]{K: &tn.KeyDevice},
		&PseudoKey[string, string]{K: &tn.KeyDeviceClass},
		&PseudoKey[bool, bool]{K: &tn.KeyEnabledByDefault},
		&PseudoKey[string, string]{K: &tn.KeyEncoding},
		&PseudoKey[string, string]{K: &tn.KeyEntityCategory},
		&PseudoKey[string, string]{K: &tn.KeyIcon},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTemplate},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTopic},
		&PseudoKey[string, string]{K: &tn.KeyNameButton},
		&PseudoKey[string, string]{K: &tn.KeyObjectId},
		&PseudoKey[string, string]{K: &tn.KeyPayloadAvailable},
		&PseudoKey[string, string]{K: &tn.KeyPayloadNotAvailable},
		&PseudoKey[bool, bool]{K: &tn.KeyPayloadPress},
		&PseudoKey[byte, byte]{K: &tn.KeyQos},
		&PseudoKey[bool, bool]{K: &tn.KeyRetain},
		&PseudoKey[string, string]{K: &tn.KeyUniqueId},
	)
}

func (tn *DeviceButton) UnmarshalJSON(b []byte) error {
	return UnmarshalBiKeys("DeviceButton", b,
		&PseudoKey[[]ValueAvailability, []ValueAvailability]{K: &tn.KeyAvailability},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityMode},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTemplate},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTopic},
		&PseudoKey[string, string]{K: &tn.KeyCommandTemplate},
		&PseudoKey[string, string]{K: &tn.KeyCommandTopic},
		&PseudoKey[ValueDevice, ValueDevice]{K: &tn.KeyDevice},
		&PseudoKey[string, string]{K: &tn.KeyDeviceClass},
		&PseudoKey[bool, bool]{K: &tn.KeyEnabledByDefault},
		&PseudoKey[string, string]{K: &tn.KeyEncoding},
		&PseudoKey[string, string]{K: &tn.KeyEntityCategory},
		&PseudoKey[string, string]{K: &tn.KeyIcon},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTemplate},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTopic},
		&PseudoKey[string, string]{K: &tn.KeyNameButton},
		&PseudoKey[string, string]{K: &tn.KeyObjectId},
		&PseudoKey[string, string]{K: &tn.KeyPayloadAvailable},
		&PseudoKey[string, string]{K: &tn.KeyPayloadNotAvailable},
		&PseudoKey[bool, bool]{K: &tn.KeyPayloadPress},
		&PseudoKey[byte, byte]{K: &tn.KeyQos},
		&PseudoKey[bool, bool]{K: &tn.KeyRetain},
		&PseudoKey[string, string]{K: &tn.KeyUniqueId},
	)
}

type DeviceSensor struct {
	KeyAvailability           KeyAvailability
	KeyAvailabilityMode       KeyAvailabilityMode
	KeyAvailabilityTemplate   KeyAvailabilityTemplate
	KeyDevice                 KeyDevice
	KeyDeviceClass            KeyDeviceClass
	KeyEnabledByDefault       KeyEnabledByDefault
	KeyEncoding               KeyEncoding
	KeyAvailabilityTopic      KeyAvailabilityTopic
	KeyEntityCategory         KeyEntityCategory
	KeyExpireAfter            KeyExpireAfter
	KeyForceUpdate            KeyForceUpdate
	KeyIcon                   KeyIcon
	KeyJsonAttributesTemplate KeyJsonAttributesTemplate
	KeyJsonAttributesTopic    KeyJsonAttributesTopic
	KeyLastResetValueTemplate KeyLastResetValueTemplate
	KeyNameSensor             KeyNameSensor
	KeyObjectId               KeyObjectId
	KeyPayloadAvailable       KeyPayloadAvailable
	KeyPayloadNotAvailable    KeyPayloadNotAvailable
	KeyQos                    KeyQos
	KeyStateClass             KeyStateClass
	KeyStateTopic             KeyStateTopic
	KeyUniqueId               KeyUniqueId
	KeyUnitOfMeasurement      KeyUnitOfMeasurement
	KeyValueTemplate          KeyValueTemplate
}

func (tn *DeviceSensor) MarshalJSON() ([]byte, error) {
	return MarshalBiKeys(
		&PseudoKey[[]ValueAvailability, []ValueAvailability]{K: &tn.KeyAvailability},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityMode},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTemplate},
		&PseudoKey[ValueDevice, ValueDevice]{K: &tn.KeyDevice},
		&PseudoKey[string, string]{K: &tn.KeyDeviceClass},
		&PseudoKey[bool, bool]{K: &tn.KeyEnabledByDefault},
		&PseudoKey[string, string]{K: &tn.KeyEncoding},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTopic},
		&PseudoKey[string, string]{K: &tn.KeyEntityCategory},
		&PseudoKey[int, int]{K: &tn.KeyExpireAfter},
		&PseudoKey[bool, bool]{K: &tn.KeyForceUpdate},
		&PseudoKey[string, string]{K: &tn.KeyIcon},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTemplate},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTopic},
		&PseudoKey[string, string]{K: &tn.KeyLastResetValueTemplate},
		&PseudoKey[string, string]{K: &tn.KeyNameSensor},
		&PseudoKey[string, string]{K: &tn.KeyObjectId},
		&PseudoKey[string, string]{K: &tn.KeyPayloadAvailable},
		&PseudoKey[string, string]{K: &tn.KeyPayloadNotAvailable},
		&PseudoKey[byte, byte]{K: &tn.KeyQos},
		&PseudoKey[string, string]{K: &tn.KeyStateClass},
		&PseudoKey[string, string]{K: &tn.KeyStateTopic},
		&PseudoKey[string, string]{K: &tn.KeyUniqueId},
		&PseudoKey[string, string]{K: &tn.KeyUnitOfMeasurement},
		&PseudoKey[string, string]{K: &tn.KeyValueTemplate},
	)
}

func (tn *DeviceSensor) UnmarshalJSON(b []byte) error {
	return UnmarshalBiKeys("DeviceSensor", b,
		&PseudoKey[[]ValueAvailability, []ValueAvailability]{K: &tn.KeyAvailability},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityMode},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTemplate},
		&PseudoKey[ValueDevice, ValueDevice]{K: &tn.KeyDevice},
		&PseudoKey[string, string]{K: &tn.KeyDeviceClass},
		&PseudoKey[bool, bool]{K: &tn.KeyEnabledByDefault},
		&PseudoKey[string, string]{K: &tn.KeyEncoding},
		&PseudoKey[string, string]{K: &tn.KeyAvailabilityTopic},
		&PseudoKey[string, string]{K: &tn.KeyEntityCategory},
		&PseudoKey[int, int]{K: &tn.KeyExpireAfter},
		&PseudoKey[bool, bool]{K: &tn.KeyForceUpdate},
		&PseudoKey[string, string]{K: &tn.KeyIcon},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTemplate},
		&PseudoKey[string, string]{K: &tn.KeyJsonAttributesTopic},
		&PseudoKey[string, string]{K: &tn.KeyLastResetValueTemplate},
		&PseudoKey[string, string]{K: &tn.KeyNameSensor},
		&PseudoKey[string, string]{K: &tn.KeyObjectId},
		&PseudoKey[string, string]{K: &tn.KeyPayloadAvailable},
		&PseudoKey[string, string]{K: &tn.KeyPayloadNotAvailable},
		&PseudoKey[byte, byte]{K: &tn.KeyQos},
		&PseudoKey[string, string]{K: &tn.KeyStateClass},
		&PseudoKey[string, string]{K: &tn.KeyStateTopic},
		&PseudoKey[string, string]{K: &tn.KeyUniqueId},
		&PseudoKey[string, string]{K: &tn.KeyUnitOfMeasurement},
		&PseudoKey[string, string]{K: &tn.KeyValueTemplate},
	)
}
