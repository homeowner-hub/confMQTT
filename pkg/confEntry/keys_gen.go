// Code generated by gen-confs DO NOT EDIT.
package confEntry

import (
	. "confMQTT/internal/pkg/tools"
)

type KeyActionTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyActionTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyActionTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyActionTopic) LongName() string {
	return "action_topic"
}

func (k *KeyActionTopic) ShortName() string {
	return "act_t"
}

func (k *KeyActionTopic) Optional() bool {
	return true
}

func (k *KeyActionTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyActionTopic) Value2() (v string, ok bool) {
	return
}

type KeyActionTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyActionTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyActionTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyActionTemplate) LongName() string {
	return "action_template"
}

func (k *KeyActionTemplate) ShortName() string {
	return "act_tpl"
}

func (k *KeyActionTemplate) Optional() bool {
	return true
}

func (k *KeyActionTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyActionTemplate) Value2() (v string, ok bool) {
	return
}

type KeyAutomationType struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAutomationType) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAutomationType",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAutomationType) LongName() string {
	return "automation_type"
}

func (k *KeyAutomationType) ShortName() string {
	return "atype"
}

func (k *KeyAutomationType) Optional() bool {
	return false
}

func (k *KeyAutomationType) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAutomationType) Value2() (v string, ok bool) {
	return
}

type KeyAuxCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAuxCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAuxCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAuxCommandTopic) LongName() string {
	return "aux_command_topic"
}

func (k *KeyAuxCommandTopic) ShortName() string {
	return "aux_cmd_t"
}

func (k *KeyAuxCommandTopic) Optional() bool {
	return true
}

func (k *KeyAuxCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAuxCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyAuxStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAuxStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAuxStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAuxStateTopic) LongName() string {
	return "aux_state_topic"
}

func (k *KeyAuxStateTopic) ShortName() string {
	return "aux_stat_t"
}

func (k *KeyAuxStateTopic) Optional() bool {
	return true
}

func (k *KeyAuxStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAuxStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyAuxStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAuxStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAuxStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAuxStateTemplate) LongName() string {
	return "aux_state_template"
}

func (k *KeyAuxStateTemplate) ShortName() string {
	return "aux_stat_tpl"
}

func (k *KeyAuxStateTemplate) Optional() bool {
	return true
}

func (k *KeyAuxStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAuxStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyAvailableTones struct {
	Val1    []string
	Exists1 bool
}

func (k *KeyAvailableTones) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[[]string]{
		Typename: "KeyAvailableTones",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAvailableTones) LongName() string {
	return "available_tones"
}

func (k *KeyAvailableTones) ShortName() string {
	return "av_tones"
}

func (k *KeyAvailableTones) Optional() bool {
	return true
}

func (k *KeyAvailableTones) Value() ([]string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAvailableTones) Value2() (v []string, ok bool) {
	return
}

type KeyAvailability struct {
	Val1    []ValueAvailability
	Exists1 bool
}

func (k *KeyAvailability) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[[]ValueAvailability]{
		Typename: "KeyAvailability",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAvailability) LongName() string {
	return "availability"
}

func (k *KeyAvailability) ShortName() string {
	return "avty"
}

func (k *KeyAvailability) Optional() bool {
	return true
}

func (k *KeyAvailability) Value() ([]ValueAvailability, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAvailability) Value2() (v []ValueAvailability, ok bool) {
	return
}

type KeyAvailabilityMode struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAvailabilityMode) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAvailabilityMode",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAvailabilityMode) LongName() string {
	return "availability_mode"
}

func (k *KeyAvailabilityMode) ShortName() string {
	return "avty_mode"
}

func (k *KeyAvailabilityMode) Optional() bool {
	return true
}

func (k *KeyAvailabilityMode) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAvailabilityMode) Value2() (v string, ok bool) {
	return
}

type KeyAvailabilityTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAvailabilityTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAvailabilityTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAvailabilityTopic) LongName() string {
	return "availability_topic"
}

func (k *KeyAvailabilityTopic) ShortName() string {
	return "avty_t"
}

func (k *KeyAvailabilityTopic) Optional() bool {
	return true
}

func (k *KeyAvailabilityTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAvailabilityTopic) Value2() (v string, ok bool) {
	return
}

type KeyAvailabilityTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAvailabilityTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAvailabilityTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAvailabilityTemplate) LongName() string {
	return "availability_template"
}

func (k *KeyAvailabilityTemplate) ShortName() string {
	return "avty_tpl"
}

func (k *KeyAvailabilityTemplate) Optional() bool {
	return true
}

func (k *KeyAvailabilityTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAvailabilityTemplate) Value2() (v string, ok bool) {
	return
}

type KeyAwayModeCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAwayModeCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAwayModeCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAwayModeCommandTopic) LongName() string {
	return "away_mode_command_topic"
}

func (k *KeyAwayModeCommandTopic) ShortName() string {
	return "away_mode_cmd_t"
}

func (k *KeyAwayModeCommandTopic) Optional() bool {
	return true
}

func (k *KeyAwayModeCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAwayModeCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyAwayModeStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAwayModeStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAwayModeStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAwayModeStateTopic) LongName() string {
	return "away_mode_state_topic"
}

func (k *KeyAwayModeStateTopic) ShortName() string {
	return "away_mode_stat_t"
}

func (k *KeyAwayModeStateTopic) Optional() bool {
	return true
}

func (k *KeyAwayModeStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAwayModeStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyAwayModeStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyAwayModeStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyAwayModeStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyAwayModeStateTemplate) LongName() string {
	return "away_mode_state_template"
}

func (k *KeyAwayModeStateTemplate) ShortName() string {
	return "away_mode_stat_tpl"
}

func (k *KeyAwayModeStateTemplate) Optional() bool {
	return true
}

func (k *KeyAwayModeStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyAwayModeStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyBlueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyBlueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyBlueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyBlueTemplate) LongName() string {
	return "blue_template"
}

func (k *KeyBlueTemplate) ShortName() string {
	return "b_tpl"
}

func (k *KeyBlueTemplate) Optional() bool {
	return true
}

func (k *KeyBlueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyBlueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyBatteryLevelTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyBatteryLevelTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyBatteryLevelTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyBatteryLevelTopic) LongName() string {
	return "battery_level_topic"
}

func (k *KeyBatteryLevelTopic) ShortName() string {
	return "bat_lev_t"
}

func (k *KeyBatteryLevelTopic) Optional() bool {
	return true
}

func (k *KeyBatteryLevelTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyBatteryLevelTopic) Value2() (v string, ok bool) {
	return
}

type KeyBatteryLevelTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyBatteryLevelTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyBatteryLevelTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyBatteryLevelTemplate) LongName() string {
	return "battery_level_template"
}

func (k *KeyBatteryLevelTemplate) ShortName() string {
	return "bat_lev_tpl"
}

func (k *KeyBatteryLevelTemplate) Optional() bool {
	return true
}

func (k *KeyBatteryLevelTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyBatteryLevelTemplate) Value2() (v string, ok bool) {
	return
}

type KeyBrightnessCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyBrightnessCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyBrightnessCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyBrightnessCommandTopic) LongName() string {
	return "brightness_command_topic"
}

func (k *KeyBrightnessCommandTopic) ShortName() string {
	return "bri_cmd_t"
}

func (k *KeyBrightnessCommandTopic) Optional() bool {
	return true
}

func (k *KeyBrightnessCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyBrightnessCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyBrightnessCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyBrightnessCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyBrightnessCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyBrightnessCommandTemplate) LongName() string {
	return "brightness_command_template"
}

func (k *KeyBrightnessCommandTemplate) ShortName() string {
	return "bri_cmd_tpl"
}

func (k *KeyBrightnessCommandTemplate) Optional() bool {
	return true
}

func (k *KeyBrightnessCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyBrightnessCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyBrightnessScale struct {
	Val1    int
	Exists1 bool
}

func (k *KeyBrightnessScale) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyBrightnessScale",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyBrightnessScale) LongName() string {
	return "brightness_scale"
}

func (k *KeyBrightnessScale) ShortName() string {
	return "bri_scl"
}

func (k *KeyBrightnessScale) Optional() bool {
	return true
}

func (k *KeyBrightnessScale) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyBrightnessScale) Value2() (v int, ok bool) {
	return
}

type KeyBrightnessStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyBrightnessStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyBrightnessStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyBrightnessStateTopic) LongName() string {
	return "brightness_state_topic"
}

func (k *KeyBrightnessStateTopic) ShortName() string {
	return "bri_stat_t"
}

func (k *KeyBrightnessStateTopic) Optional() bool {
	return true
}

func (k *KeyBrightnessStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyBrightnessStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyBrightnessTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyBrightnessTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyBrightnessTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyBrightnessTemplate) LongName() string {
	return "brightness_template"
}

func (k *KeyBrightnessTemplate) ShortName() string {
	return "bri_tpl"
}

func (k *KeyBrightnessTemplate) Optional() bool {
	return true
}

func (k *KeyBrightnessTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyBrightnessTemplate) Value2() (v string, ok bool) {
	return
}

type KeyBrightnessValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyBrightnessValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyBrightnessValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyBrightnessValueTemplate) LongName() string {
	return "brightness_value_template"
}

func (k *KeyBrightnessValueTemplate) ShortName() string {
	return "bri_val_tpl"
}

func (k *KeyBrightnessValueTemplate) Optional() bool {
	return true
}

func (k *KeyBrightnessValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyBrightnessValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyChargingTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyChargingTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyChargingTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyChargingTopic) LongName() string {
	return "charging_topic"
}

func (k *KeyChargingTopic) ShortName() string {
	return "chrg_t"
}

func (k *KeyChargingTopic) Optional() bool {
	return true
}

func (k *KeyChargingTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyChargingTopic) Value2() (v string, ok bool) {
	return
}

type KeyChargingTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyChargingTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyChargingTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyChargingTemplate) LongName() string {
	return "charging_template"
}

func (k *KeyChargingTemplate) ShortName() string {
	return "chrg_tpl"
}

func (k *KeyChargingTemplate) Optional() bool {
	return true
}

func (k *KeyChargingTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyChargingTemplate) Value2() (v string, ok bool) {
	return
}

type KeyCleaningTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyCleaningTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyCleaningTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCleaningTopic) LongName() string {
	return "cleaning_topic"
}

func (k *KeyCleaningTopic) ShortName() string {
	return "cln_t"
}

func (k *KeyCleaningTopic) Optional() bool {
	return true
}

func (k *KeyCleaningTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCleaningTopic) Value2() (v string, ok bool) {
	return
}

type KeyCleaningTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyCleaningTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyCleaningTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCleaningTemplate) LongName() string {
	return "cleaning_template"
}

func (k *KeyCleaningTemplate) ShortName() string {
	return "cln_tpl"
}

func (k *KeyCleaningTemplate) Optional() bool {
	return true
}

func (k *KeyCleaningTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCleaningTemplate) Value2() (v string, ok bool) {
	return
}

type KeyColorTempCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyColorTempCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyColorTempCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyColorTempCommandTopic) LongName() string {
	return "color_temp_command_topic"
}

func (k *KeyColorTempCommandTopic) ShortName() string {
	return "clr_temp_cmd_t"
}

func (k *KeyColorTempCommandTopic) Optional() bool {
	return true
}

func (k *KeyColorTempCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyColorTempCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyColorTempCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyColorTempCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyColorTempCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyColorTempCommandTemplate) LongName() string {
	return "color_temp_command_template"
}

func (k *KeyColorTempCommandTemplate) ShortName() string {
	return "clr_temp_cmd_tpl"
}

func (k *KeyColorTempCommandTemplate) Optional() bool {
	return true
}

func (k *KeyColorTempCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyColorTempCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyColorTempStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyColorTempStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyColorTempStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyColorTempStateTopic) LongName() string {
	return "color_temp_state_topic"
}

func (k *KeyColorTempStateTopic) ShortName() string {
	return "clr_temp_stat_t"
}

func (k *KeyColorTempStateTopic) Optional() bool {
	return true
}

func (k *KeyColorTempStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyColorTempStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyColorTempTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyColorTempTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyColorTempTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyColorTempTemplate) LongName() string {
	return "color_temp_template"
}

func (k *KeyColorTempTemplate) ShortName() string {
	return "clr_temp_tpl"
}

func (k *KeyColorTempTemplate) Optional() bool {
	return true
}

func (k *KeyColorTempTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyColorTempTemplate) Value2() (v string, ok bool) {
	return
}

type KeyColorTempValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyColorTempValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyColorTempValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyColorTempValueTemplate) LongName() string {
	return "color_temp_value_template"
}

func (k *KeyColorTempValueTemplate) ShortName() string {
	return "clr_temp_val_tpl"
}

func (k *KeyColorTempValueTemplate) Optional() bool {
	return true
}

func (k *KeyColorTempValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyColorTempValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyCommandOffTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyCommandOffTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyCommandOffTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCommandOffTemplate) LongName() string {
	return "command_off_template"
}

func (k *KeyCommandOffTemplate) ShortName() string {
	return "cmd_off_tpl"
}

func (k *KeyCommandOffTemplate) Optional() bool {
	return false
}

func (k *KeyCommandOffTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCommandOffTemplate) Value2() (v string, ok bool) {
	return
}

type KeyCommandOnTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyCommandOnTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyCommandOnTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCommandOnTemplate) LongName() string {
	return "command_on_template"
}

func (k *KeyCommandOnTemplate) ShortName() string {
	return "cmd_on_tpl"
}

func (k *KeyCommandOnTemplate) Optional() bool {
	return false
}

func (k *KeyCommandOnTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCommandOnTemplate) Value2() (v string, ok bool) {
	return
}

type KeyCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCommandTopic) LongName() string {
	return "command_topic"
}

func (k *KeyCommandTopic) ShortName() string {
	return "cmd_t"
}

func (k *KeyCommandTopic) Optional() bool {
	return false
}

func (k *KeyCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCommandTemplate) LongName() string {
	return "command_template"
}

func (k *KeyCommandTemplate) ShortName() string {
	return "cmd_tpl"
}

func (k *KeyCommandTemplate) Optional() bool {
	return true
}

func (k *KeyCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyConnections struct {
	Val1    [][]string
	Exists1 bool
	Val2    map[string]string
	Exists2 bool
}

func (k *KeyConnections) UnmarshalJSON(b []byte) error {
	return BiValueUnmarshaler[[][]string, map[string]string]{
		ValueUnmarshaler: ValueUnmarshaler[[][]string]{
			Typename: "KeyConnections",
			Value1:   &k.Val1,
			Exists1:  &k.Exists1,
		},
		Value2:  &k.Val2,
		Exists2: &k.Exists2,
	}.UnmarshalJSON(b)
}

func (k *KeyConnections) LongName() string {
	return "connections"
}

func (k *KeyConnections) ShortName() string {
	return "cns"
}

func (k *KeyConnections) Optional() bool {
	return true
}

func (k *KeyConnections) Value() ([][]string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyConnections) Value2() (map[string]string, bool) {
	return k.Val2, k.Exists2
}

type KeyCodeArmRequired struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyCodeArmRequired) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyCodeArmRequired",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCodeArmRequired) LongName() string {
	return "code_arm_required"
}

func (k *KeyCodeArmRequired) ShortName() string {
	return "cod_arm_req"
}

func (k *KeyCodeArmRequired) Optional() bool {
	return true
}

func (k *KeyCodeArmRequired) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCodeArmRequired) Value2() (v bool, ok bool) {
	return
}

type KeyCodeDisarmRequired struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyCodeDisarmRequired) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyCodeDisarmRequired",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCodeDisarmRequired) LongName() string {
	return "code_disarm_required"
}

func (k *KeyCodeDisarmRequired) ShortName() string {
	return "cod_dis_req"
}

func (k *KeyCodeDisarmRequired) Optional() bool {
	return true
}

func (k *KeyCodeDisarmRequired) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCodeDisarmRequired) Value2() (v bool, ok bool) {
	return
}

type KeyCodeTriggerRequired struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyCodeTriggerRequired) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyCodeTriggerRequired",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCodeTriggerRequired) LongName() string {
	return "code_trigger_required"
}

func (k *KeyCodeTriggerRequired) ShortName() string {
	return "cod_trig_req"
}

func (k *KeyCodeTriggerRequired) Optional() bool {
	return true
}

func (k *KeyCodeTriggerRequired) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCodeTriggerRequired) Value2() (v bool, ok bool) {
	return
}

type KeyConfigurationUrl struct {
	Val1    string
	Exists1 bool
}

func (k *KeyConfigurationUrl) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyConfigurationUrl",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyConfigurationUrl) LongName() string {
	return "configuration_url"
}

func (k *KeyConfigurationUrl) ShortName() string {
	return "cu"
}

func (k *KeyConfigurationUrl) Optional() bool {
	return true
}

func (k *KeyConfigurationUrl) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyConfigurationUrl) Value2() (v string, ok bool) {
	return
}

type KeyCurrentTemperatureTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyCurrentTemperatureTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyCurrentTemperatureTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCurrentTemperatureTopic) LongName() string {
	return "current_temperature_topic"
}

func (k *KeyCurrentTemperatureTopic) ShortName() string {
	return "curr_temp_t"
}

func (k *KeyCurrentTemperatureTopic) Optional() bool {
	return true
}

func (k *KeyCurrentTemperatureTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCurrentTemperatureTopic) Value2() (v string, ok bool) {
	return
}

type KeyCurrentTemperatureTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyCurrentTemperatureTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyCurrentTemperatureTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyCurrentTemperatureTemplate) LongName() string {
	return "current_temperature_template"
}

func (k *KeyCurrentTemperatureTemplate) ShortName() string {
	return "curr_temp_tpl"
}

func (k *KeyCurrentTemperatureTemplate) Optional() bool {
	return true
}

func (k *KeyCurrentTemperatureTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyCurrentTemperatureTemplate) Value2() (v string, ok bool) {
	return
}

type KeyDevice struct {
	Val1    ValueDevice
	Exists1 bool
}

func (k *KeyDevice) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[ValueDevice]{
		Typename: "KeyDevice",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyDevice) LongName() string {
	return "device"
}

func (k *KeyDevice) ShortName() string {
	return "dev"
}

func (k *KeyDevice) Optional() bool {
	return true
}

func (k *KeyDevice) Value() (ValueDevice, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyDevice) Value2() (v ValueDevice, ok bool) {
	return
}

type KeyDeviceClass struct {
	Val1    string
	Exists1 bool
}

func (k *KeyDeviceClass) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyDeviceClass",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyDeviceClass) LongName() string {
	return "device_class"
}

func (k *KeyDeviceClass) ShortName() string {
	return "dev_cla"
}

func (k *KeyDeviceClass) Optional() bool {
	return true
}

func (k *KeyDeviceClass) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyDeviceClass) Value2() (v string, ok bool) {
	return
}

type KeyDockedTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyDockedTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyDockedTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyDockedTopic) LongName() string {
	return "docked_topic"
}

func (k *KeyDockedTopic) ShortName() string {
	return "dock_t"
}

func (k *KeyDockedTopic) Optional() bool {
	return true
}

func (k *KeyDockedTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyDockedTopic) Value2() (v string, ok bool) {
	return
}

type KeyDockedTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyDockedTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyDockedTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyDockedTemplate) LongName() string {
	return "docked_template"
}

func (k *KeyDockedTemplate) ShortName() string {
	return "dock_tpl"
}

func (k *KeyDockedTemplate) Optional() bool {
	return true
}

func (k *KeyDockedTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyDockedTemplate) Value2() (v string, ok bool) {
	return
}

type KeyEncoding struct {
	Val1    string
	Exists1 bool
}

func (k *KeyEncoding) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyEncoding",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyEncoding) LongName() string {
	return "encoding"
}

func (k *KeyEncoding) ShortName() string {
	return "e"
}

func (k *KeyEncoding) Optional() bool {
	return true
}

func (k *KeyEncoding) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyEncoding) Value2() (v string, ok bool) {
	return
}

type KeyEntityCategory struct {
	Val1    string
	Exists1 bool
}

func (k *KeyEntityCategory) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyEntityCategory",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyEntityCategory) LongName() string {
	return "entity_category"
}

func (k *KeyEntityCategory) ShortName() string {
	return "ent_cat"
}

func (k *KeyEntityCategory) Optional() bool {
	return true
}

func (k *KeyEntityCategory) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyEntityCategory) Value2() (v string, ok bool) {
	return
}

type KeyErrorTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyErrorTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyErrorTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyErrorTopic) LongName() string {
	return "error_topic"
}

func (k *KeyErrorTopic) ShortName() string {
	return "err_t"
}

func (k *KeyErrorTopic) Optional() bool {
	return true
}

func (k *KeyErrorTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyErrorTopic) Value2() (v string, ok bool) {
	return
}

type KeyErrorTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyErrorTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyErrorTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyErrorTemplate) LongName() string {
	return "error_template"
}

func (k *KeyErrorTemplate) ShortName() string {
	return "err_tpl"
}

func (k *KeyErrorTemplate) Optional() bool {
	return true
}

func (k *KeyErrorTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyErrorTemplate) Value2() (v string, ok bool) {
	return
}

type KeyExpireAfter struct {
	Val1    int
	Exists1 bool
}

func (k *KeyExpireAfter) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyExpireAfter",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyExpireAfter) LongName() string {
	return "expire_after"
}

func (k *KeyExpireAfter) ShortName() string {
	return "exp_aft"
}

func (k *KeyExpireAfter) Optional() bool {
	return true
}

func (k *KeyExpireAfter) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyExpireAfter) Value2() (v int, ok bool) {
	return
}

type KeyFanModeCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyFanModeCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyFanModeCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyFanModeCommandTopic) LongName() string {
	return "fan_mode_command_topic"
}

func (k *KeyFanModeCommandTopic) ShortName() string {
	return "fan_mode_cmd_t"
}

func (k *KeyFanModeCommandTopic) Optional() bool {
	return true
}

func (k *KeyFanModeCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyFanModeCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyFanModeCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyFanModeCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyFanModeCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyFanModeCommandTemplate) LongName() string {
	return "fan_mode_command_template"
}

func (k *KeyFanModeCommandTemplate) ShortName() string {
	return "fan_mode_cmd_tpl"
}

func (k *KeyFanModeCommandTemplate) Optional() bool {
	return true
}

func (k *KeyFanModeCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyFanModeCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyFanModeStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyFanModeStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyFanModeStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyFanModeStateTopic) LongName() string {
	return "fan_mode_state_topic"
}

func (k *KeyFanModeStateTopic) ShortName() string {
	return "fan_mode_stat_t"
}

func (k *KeyFanModeStateTopic) Optional() bool {
	return true
}

func (k *KeyFanModeStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyFanModeStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyFanModeStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyFanModeStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyFanModeStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyFanModeStateTemplate) LongName() string {
	return "fan_mode_state_template"
}

func (k *KeyFanModeStateTemplate) ShortName() string {
	return "fan_mode_stat_tpl"
}

func (k *KeyFanModeStateTemplate) Optional() bool {
	return true
}

func (k *KeyFanModeStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyFanModeStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyFanSpeedList struct {
	Val1    string
	Exists1 bool
	Val2    []string
	Exists2 bool
}

func (k *KeyFanSpeedList) UnmarshalJSON(b []byte) error {
	return BiValueUnmarshaler[string, []string]{
		ValueUnmarshaler: ValueUnmarshaler[string]{
			Typename: "KeyFanSpeedList",
			Value1:   &k.Val1,
			Exists1:  &k.Exists1,
		},
		Value2:  &k.Val2,
		Exists2: &k.Exists2,
	}.UnmarshalJSON(b)
}

func (k *KeyFanSpeedList) LongName() string {
	return "fan_speed_list"
}

func (k *KeyFanSpeedList) ShortName() string {
	return "fanspd_lst"
}

func (k *KeyFanSpeedList) Optional() bool {
	return true
}

func (k *KeyFanSpeedList) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyFanSpeedList) Value2() ([]string, bool) {
	return k.Val2, k.Exists2
}

type KeyFanSpeedTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyFanSpeedTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyFanSpeedTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyFanSpeedTopic) LongName() string {
	return "fan_speed_topic"
}

func (k *KeyFanSpeedTopic) ShortName() string {
	return "fanspd_t"
}

func (k *KeyFanSpeedTopic) Optional() bool {
	return true
}

func (k *KeyFanSpeedTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyFanSpeedTopic) Value2() (v string, ok bool) {
	return
}

type KeyFanSpeedTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyFanSpeedTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyFanSpeedTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyFanSpeedTemplate) LongName() string {
	return "fan_speed_template"
}

func (k *KeyFanSpeedTemplate) ShortName() string {
	return "fanspd_tpl"
}

func (k *KeyFanSpeedTemplate) Optional() bool {
	return true
}

func (k *KeyFanSpeedTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyFanSpeedTemplate) Value2() (v string, ok bool) {
	return
}

type KeyFlashTimeLong struct {
	Val1    int
	Exists1 bool
}

func (k *KeyFlashTimeLong) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyFlashTimeLong",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyFlashTimeLong) LongName() string {
	return "flash_time_long"
}

func (k *KeyFlashTimeLong) ShortName() string {
	return "flsh_tlng"
}

func (k *KeyFlashTimeLong) Optional() bool {
	return true
}

func (k *KeyFlashTimeLong) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyFlashTimeLong) Value2() (v int, ok bool) {
	return
}

type KeyFlashTimeShort struct {
	Val1    int
	Exists1 bool
}

func (k *KeyFlashTimeShort) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyFlashTimeShort",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyFlashTimeShort) LongName() string {
	return "flash_time_short"
}

func (k *KeyFlashTimeShort) ShortName() string {
	return "flsh_tsht"
}

func (k *KeyFlashTimeShort) Optional() bool {
	return true
}

func (k *KeyFlashTimeShort) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyFlashTimeShort) Value2() (v int, ok bool) {
	return
}

type KeyForceUpdate struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyForceUpdate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyForceUpdate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyForceUpdate) LongName() string {
	return "force_update"
}

func (k *KeyForceUpdate) ShortName() string {
	return "frc_upd"
}

func (k *KeyForceUpdate) Optional() bool {
	return true
}

func (k *KeyForceUpdate) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyForceUpdate) Value2() (v bool, ok bool) {
	return
}

type KeyEffectCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyEffectCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyEffectCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyEffectCommandTopic) LongName() string {
	return "effect_command_topic"
}

func (k *KeyEffectCommandTopic) ShortName() string {
	return "fx_cmd_t"
}

func (k *KeyEffectCommandTopic) Optional() bool {
	return true
}

func (k *KeyEffectCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyEffectCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyEffectCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyEffectCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyEffectCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyEffectCommandTemplate) LongName() string {
	return "effect_command_template"
}

func (k *KeyEffectCommandTemplate) ShortName() string {
	return "fx_cmd_tpl"
}

func (k *KeyEffectCommandTemplate) Optional() bool {
	return true
}

func (k *KeyEffectCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyEffectCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyEffectList struct {
	Val1    string
	Exists1 bool
	Val2    []string
	Exists2 bool
}

func (k *KeyEffectList) UnmarshalJSON(b []byte) error {
	return BiValueUnmarshaler[string, []string]{
		ValueUnmarshaler: ValueUnmarshaler[string]{
			Typename: "KeyEffectList",
			Value1:   &k.Val1,
			Exists1:  &k.Exists1,
		},
		Value2:  &k.Val2,
		Exists2: &k.Exists2,
	}.UnmarshalJSON(b)
}

func (k *KeyEffectList) LongName() string {
	return "effect_list"
}

func (k *KeyEffectList) ShortName() string {
	return "fx_list"
}

func (k *KeyEffectList) Optional() bool {
	return true
}

func (k *KeyEffectList) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyEffectList) Value2() ([]string, bool) {
	return k.Val2, k.Exists2
}

type KeyEffectStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyEffectStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyEffectStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyEffectStateTopic) LongName() string {
	return "effect_state_topic"
}

func (k *KeyEffectStateTopic) ShortName() string {
	return "fx_stat_t"
}

func (k *KeyEffectStateTopic) Optional() bool {
	return true
}

func (k *KeyEffectStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyEffectStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyEffectTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyEffectTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyEffectTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyEffectTemplate) LongName() string {
	return "effect_template"
}

func (k *KeyEffectTemplate) ShortName() string {
	return "fx_tpl"
}

func (k *KeyEffectTemplate) Optional() bool {
	return true
}

func (k *KeyEffectTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyEffectTemplate) Value2() (v string, ok bool) {
	return
}

type KeyEffectValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyEffectValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyEffectValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyEffectValueTemplate) LongName() string {
	return "effect_value_template"
}

func (k *KeyEffectValueTemplate) ShortName() string {
	return "fx_val_tpl"
}

func (k *KeyEffectValueTemplate) Optional() bool {
	return true
}

func (k *KeyEffectValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyEffectValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyGreenTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyGreenTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyGreenTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyGreenTemplate) LongName() string {
	return "green_template"
}

func (k *KeyGreenTemplate) ShortName() string {
	return "g_tpl"
}

func (k *KeyGreenTemplate) Optional() bool {
	return true
}

func (k *KeyGreenTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyGreenTemplate) Value2() (v string, ok bool) {
	return
}

type KeyHoldCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyHoldCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyHoldCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyHoldCommandTopic) LongName() string {
	return "hold_command_topic"
}

func (k *KeyHoldCommandTopic) ShortName() string {
	return "hold_cmd_t"
}

func (k *KeyHoldCommandTopic) Optional() bool {
	return true
}

func (k *KeyHoldCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyHoldCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyHoldCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyHoldCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyHoldCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyHoldCommandTemplate) LongName() string {
	return "hold_command_template"
}

func (k *KeyHoldCommandTemplate) ShortName() string {
	return "hold_cmd_tpl"
}

func (k *KeyHoldCommandTemplate) Optional() bool {
	return true
}

func (k *KeyHoldCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyHoldCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyHoldStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyHoldStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyHoldStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyHoldStateTopic) LongName() string {
	return "hold_state_topic"
}

func (k *KeyHoldStateTopic) ShortName() string {
	return "hold_stat_t"
}

func (k *KeyHoldStateTopic) Optional() bool {
	return true
}

func (k *KeyHoldStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyHoldStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyHoldStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyHoldStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyHoldStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyHoldStateTemplate) LongName() string {
	return "hold_state_template"
}

func (k *KeyHoldStateTemplate) ShortName() string {
	return "hold_stat_tpl"
}

func (k *KeyHoldStateTemplate) Optional() bool {
	return true
}

func (k *KeyHoldStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyHoldStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyHsCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyHsCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyHsCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyHsCommandTopic) LongName() string {
	return "hs_command_topic"
}

func (k *KeyHsCommandTopic) ShortName() string {
	return "hs_cmd_t"
}

func (k *KeyHsCommandTopic) Optional() bool {
	return true
}

func (k *KeyHsCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyHsCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyHsStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyHsStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyHsStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyHsStateTopic) LongName() string {
	return "hs_state_topic"
}

func (k *KeyHsStateTopic) ShortName() string {
	return "hs_stat_t"
}

func (k *KeyHsStateTopic) Optional() bool {
	return true
}

func (k *KeyHsStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyHsStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyHsValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyHsValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyHsValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyHsValueTemplate) LongName() string {
	return "hs_value_template"
}

func (k *KeyHsValueTemplate) ShortName() string {
	return "hs_val_tpl"
}

func (k *KeyHsValueTemplate) Optional() bool {
	return true
}

func (k *KeyHsValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyHsValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTargetHumidityCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTargetHumidityCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTargetHumidityCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTargetHumidityCommandTopic) LongName() string {
	return "target_humidity_command_topic"
}

func (k *KeyTargetHumidityCommandTopic) ShortName() string {
	return "hum_cmd_t"
}

func (k *KeyTargetHumidityCommandTopic) Optional() bool {
	return false
}

func (k *KeyTargetHumidityCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTargetHumidityCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyTargetHumidityCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTargetHumidityCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTargetHumidityCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTargetHumidityCommandTemplate) LongName() string {
	return "target_humidity_command_template"
}

func (k *KeyTargetHumidityCommandTemplate) ShortName() string {
	return "hum_cmd_tpl"
}

func (k *KeyTargetHumidityCommandTemplate) Optional() bool {
	return true
}

func (k *KeyTargetHumidityCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTargetHumidityCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTargetHumidityStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTargetHumidityStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTargetHumidityStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTargetHumidityStateTopic) LongName() string {
	return "target_humidity_state_topic"
}

func (k *KeyTargetHumidityStateTopic) ShortName() string {
	return "hum_stat_t"
}

func (k *KeyTargetHumidityStateTopic) Optional() bool {
	return true
}

func (k *KeyTargetHumidityStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTargetHumidityStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyTargetHumidityStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTargetHumidityStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTargetHumidityStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTargetHumidityStateTemplate) LongName() string {
	return "target_humidity_state_template"
}

func (k *KeyTargetHumidityStateTemplate) ShortName() string {
	return "hum_stat_tpl"
}

func (k *KeyTargetHumidityStateTemplate) Optional() bool {
	return true
}

func (k *KeyTargetHumidityStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTargetHumidityStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyIcon struct {
	Val1    string
	Exists1 bool
}

func (k *KeyIcon) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyIcon",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyIcon) LongName() string {
	return "icon"
}

func (k *KeyIcon) ShortName() string {
	return "ic"
}

func (k *KeyIcon) Optional() bool {
	return true
}

func (k *KeyIcon) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyIcon) Value2() (v string, ok bool) {
	return
}

type KeyIdentifiers struct {
	Val1    string
	Exists1 bool
	Val2    []string
	Exists2 bool
}

func (k *KeyIdentifiers) UnmarshalJSON(b []byte) error {
	return BiValueUnmarshaler[string, []string]{
		ValueUnmarshaler: ValueUnmarshaler[string]{
			Typename: "KeyIdentifiers",
			Value1:   &k.Val1,
			Exists1:  &k.Exists1,
		},
		Value2:  &k.Val2,
		Exists2: &k.Exists2,
	}.UnmarshalJSON(b)
}

func (k *KeyIdentifiers) LongName() string {
	return "identifiers"
}

func (k *KeyIdentifiers) ShortName() string {
	return "ids"
}

func (k *KeyIdentifiers) Optional() bool {
	return true
}

func (k *KeyIdentifiers) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyIdentifiers) Value2() ([]string, bool) {
	return k.Val2, k.Exists2
}

type KeyInitial struct {
	Val1    string
	Exists1 bool
}

func (k *KeyInitial) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyInitial",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyInitial) LongName() string {
	return "initial"
}

func (k *KeyInitial) ShortName() string {
	return "init"
}

func (k *KeyInitial) Optional() bool {
	return true
}

func (k *KeyInitial) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyInitial) Value2() (v string, ok bool) {
	return
}

type KeyJsonAttributes struct {
	Val1    string
	Exists1 bool
}

func (k *KeyJsonAttributes) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyJsonAttributes",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyJsonAttributes) LongName() string {
	return "json_attributes"
}

func (k *KeyJsonAttributes) ShortName() string {
	return "json_attr"
}

func (k *KeyJsonAttributes) Optional() bool {
	return true
}

func (k *KeyJsonAttributes) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyJsonAttributes) Value2() (v string, ok bool) {
	return
}

type KeyJsonAttributesTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyJsonAttributesTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyJsonAttributesTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyJsonAttributesTopic) LongName() string {
	return "json_attributes_topic"
}

func (k *KeyJsonAttributesTopic) ShortName() string {
	return "json_attr_t"
}

func (k *KeyJsonAttributesTopic) Optional() bool {
	return true
}

func (k *KeyJsonAttributesTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyJsonAttributesTopic) Value2() (v string, ok bool) {
	return
}

type KeyJsonAttributesTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyJsonAttributesTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyJsonAttributesTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyJsonAttributesTemplate) LongName() string {
	return "json_attributes_template"
}

func (k *KeyJsonAttributesTemplate) ShortName() string {
	return "json_attr_tpl"
}

func (k *KeyJsonAttributesTemplate) Optional() bool {
	return true
}

func (k *KeyJsonAttributesTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyJsonAttributesTemplate) Value2() (v string, ok bool) {
	return
}

type KeyMaxHumidity struct {
	Val1    int
	Exists1 bool
}

func (k *KeyMaxHumidity) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyMaxHumidity",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyMaxHumidity) LongName() string {
	return "max_humidity"
}

func (k *KeyMaxHumidity) ShortName() string {
	return "max_hum"
}

func (k *KeyMaxHumidity) Optional() bool {
	return true
}

func (k *KeyMaxHumidity) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyMaxHumidity) Value2() (v int, ok bool) {
	return
}

type KeyMaxMireds struct {
	Val1    int
	Exists1 bool
}

func (k *KeyMaxMireds) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyMaxMireds",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyMaxMireds) LongName() string {
	return "max_mireds"
}

func (k *KeyMaxMireds) ShortName() string {
	return "max_mirs"
}

func (k *KeyMaxMireds) Optional() bool {
	return true
}

func (k *KeyMaxMireds) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyMaxMireds) Value2() (v int, ok bool) {
	return
}

type KeyMaxTemp struct {
	Val1    float64
	Exists1 bool
}

func (k *KeyMaxTemp) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[float64]{
		Typename: "KeyMaxTemp",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyMaxTemp) LongName() string {
	return "max_temp"
}

func (k *KeyMaxTemp) ShortName() string {
	return "max_temp"
}

func (k *KeyMaxTemp) Optional() bool {
	return true
}

func (k *KeyMaxTemp) Value() (float64, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyMaxTemp) Value2() (v float64, ok bool) {
	return
}

type KeyModel struct {
	Val1    string
	Exists1 bool
}

func (k *KeyModel) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyModel",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyModel) LongName() string {
	return "model"
}

func (k *KeyModel) ShortName() string {
	return "mdl"
}

func (k *KeyModel) Optional() bool {
	return true
}

func (k *KeyModel) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyModel) Value2() (v string, ok bool) {
	return
}

type KeyManufacturer struct {
	Val1    string
	Exists1 bool
}

func (k *KeyManufacturer) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyManufacturer",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyManufacturer) LongName() string {
	return "manufacturer"
}

func (k *KeyManufacturer) ShortName() string {
	return "mf"
}

func (k *KeyManufacturer) Optional() bool {
	return true
}

func (k *KeyManufacturer) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyManufacturer) Value2() (v string, ok bool) {
	return
}

type KeyMinHumidity struct {
	Val1    int
	Exists1 bool
}

func (k *KeyMinHumidity) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyMinHumidity",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyMinHumidity) LongName() string {
	return "min_humidity"
}

func (k *KeyMinHumidity) ShortName() string {
	return "min_hum"
}

func (k *KeyMinHumidity) Optional() bool {
	return true
}

func (k *KeyMinHumidity) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyMinHumidity) Value2() (v int, ok bool) {
	return
}

type KeyMinMireds struct {
	Val1    int
	Exists1 bool
}

func (k *KeyMinMireds) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyMinMireds",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyMinMireds) LongName() string {
	return "min_mireds"
}

func (k *KeyMinMireds) ShortName() string {
	return "min_mirs"
}

func (k *KeyMinMireds) Optional() bool {
	return true
}

func (k *KeyMinMireds) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyMinMireds) Value2() (v int, ok bool) {
	return
}

type KeyMinTemp struct {
	Val1    float64
	Exists1 bool
}

func (k *KeyMinTemp) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[float64]{
		Typename: "KeyMinTemp",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyMinTemp) LongName() string {
	return "min_temp"
}

func (k *KeyMinTemp) ShortName() string {
	return "min_temp"
}

func (k *KeyMinTemp) Optional() bool {
	return true
}

func (k *KeyMinTemp) Value() (float64, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyMinTemp) Value2() (v float64, ok bool) {
	return
}

type KeyModeCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyModeCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyModeCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyModeCommandTopic) LongName() string {
	return "mode_command_topic"
}

func (k *KeyModeCommandTopic) ShortName() string {
	return "mode_cmd_t"
}

func (k *KeyModeCommandTopic) Optional() bool {
	return true
}

func (k *KeyModeCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyModeCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyModeCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyModeCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyModeCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyModeCommandTemplate) LongName() string {
	return "mode_command_template"
}

func (k *KeyModeCommandTemplate) ShortName() string {
	return "mode_cmd_tpl"
}

func (k *KeyModeCommandTemplate) Optional() bool {
	return true
}

func (k *KeyModeCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyModeCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyModeStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyModeStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyModeStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyModeStateTopic) LongName() string {
	return "mode_state_topic"
}

func (k *KeyModeStateTopic) ShortName() string {
	return "mode_stat_t"
}

func (k *KeyModeStateTopic) Optional() bool {
	return true
}

func (k *KeyModeStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyModeStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyModeStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyModeStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyModeStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyModeStateTemplate) LongName() string {
	return "mode_state_template"
}

func (k *KeyModeStateTemplate) ShortName() string {
	return "mode_stat_tpl"
}

func (k *KeyModeStateTemplate) Optional() bool {
	return true
}

func (k *KeyModeStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyModeStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyModes struct {
	Val1    []string
	Exists1 bool
}

func (k *KeyModes) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[[]string]{
		Typename: "KeyModes",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyModes) LongName() string {
	return "modes"
}

func (k *KeyModes) ShortName() string {
	return "modes"
}

func (k *KeyModes) Optional() bool {
	return true
}

func (k *KeyModes) Value() ([]string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyModes) Value2() (v []string, ok bool) {
	return
}

type KeyName struct {
	Val1    string
	Exists1 bool
}

func (k *KeyName) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyName",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyName) LongName() string {
	return "name"
}

func (k *KeyName) ShortName() string {
	return "name"
}

func (k *KeyName) Optional() bool {
	return true
}

func (k *KeyName) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyName) Value2() (v string, ok bool) {
	return
}

type KeyObjectId struct {
	Val1    string
	Exists1 bool
}

func (k *KeyObjectId) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyObjectId",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyObjectId) LongName() string {
	return "object_id"
}

func (k *KeyObjectId) ShortName() string {
	return "obj_id"
}

func (k *KeyObjectId) Optional() bool {
	return true
}

func (k *KeyObjectId) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyObjectId) Value2() (v string, ok bool) {
	return
}

type KeyOffDelay struct {
	Val1    int
	Exists1 bool
}

func (k *KeyOffDelay) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyOffDelay",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyOffDelay) LongName() string {
	return "off_delay"
}

func (k *KeyOffDelay) ShortName() string {
	return "off_dly"
}

func (k *KeyOffDelay) Optional() bool {
	return true
}

func (k *KeyOffDelay) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyOffDelay) Value2() (v int, ok bool) {
	return
}

type KeyOnCommandType struct {
	Val1    string
	Exists1 bool
}

func (k *KeyOnCommandType) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyOnCommandType",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyOnCommandType) LongName() string {
	return "on_command_type"
}

func (k *KeyOnCommandType) ShortName() string {
	return "on_cmd_type"
}

func (k *KeyOnCommandType) Optional() bool {
	return true
}

func (k *KeyOnCommandType) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyOnCommandType) Value2() (v string, ok bool) {
	return
}

type KeyOptimistic struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyOptimistic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyOptimistic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyOptimistic) LongName() string {
	return "optimistic"
}

func (k *KeyOptimistic) ShortName() string {
	return "opt"
}

func (k *KeyOptimistic) Optional() bool {
	return true
}

func (k *KeyOptimistic) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyOptimistic) Value2() (v bool, ok bool) {
	return
}

type KeyOscillationCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyOscillationCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyOscillationCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyOscillationCommandTopic) LongName() string {
	return "oscillation_command_topic"
}

func (k *KeyOscillationCommandTopic) ShortName() string {
	return "osc_cmd_t"
}

func (k *KeyOscillationCommandTopic) Optional() bool {
	return true
}

func (k *KeyOscillationCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyOscillationCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyOscillationCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyOscillationCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyOscillationCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyOscillationCommandTemplate) LongName() string {
	return "oscillation_command_template"
}

func (k *KeyOscillationCommandTemplate) ShortName() string {
	return "osc_cmd_tpl"
}

func (k *KeyOscillationCommandTemplate) Optional() bool {
	return true
}

func (k *KeyOscillationCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyOscillationCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyOscillationStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyOscillationStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyOscillationStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyOscillationStateTopic) LongName() string {
	return "oscillation_state_topic"
}

func (k *KeyOscillationStateTopic) ShortName() string {
	return "osc_stat_t"
}

func (k *KeyOscillationStateTopic) Optional() bool {
	return true
}

func (k *KeyOscillationStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyOscillationStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyOscillationValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyOscillationValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyOscillationValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyOscillationValueTemplate) LongName() string {
	return "oscillation_value_template"
}

func (k *KeyOscillationValueTemplate) ShortName() string {
	return "osc_val_tpl"
}

func (k *KeyOscillationValueTemplate) Optional() bool {
	return true
}

func (k *KeyOscillationValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyOscillationValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyPercentageCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPercentageCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPercentageCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPercentageCommandTopic) LongName() string {
	return "percentage_command_topic"
}

func (k *KeyPercentageCommandTopic) ShortName() string {
	return "pct_cmd_t"
}

func (k *KeyPercentageCommandTopic) Optional() bool {
	return true
}

func (k *KeyPercentageCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPercentageCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyPercentageCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPercentageCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPercentageCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPercentageCommandTemplate) LongName() string {
	return "percentage_command_template"
}

func (k *KeyPercentageCommandTemplate) ShortName() string {
	return "pct_cmd_tpl"
}

func (k *KeyPercentageCommandTemplate) Optional() bool {
	return true
}

func (k *KeyPercentageCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPercentageCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyPercentageStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPercentageStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPercentageStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPercentageStateTopic) LongName() string {
	return "percentage_state_topic"
}

func (k *KeyPercentageStateTopic) ShortName() string {
	return "pct_stat_t"
}

func (k *KeyPercentageStateTopic) Optional() bool {
	return true
}

func (k *KeyPercentageStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPercentageStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyPercentageValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPercentageValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPercentageValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPercentageValueTemplate) LongName() string {
	return "percentage_value_template"
}

func (k *KeyPercentageValueTemplate) ShortName() string {
	return "pct_val_tpl"
}

func (k *KeyPercentageValueTemplate) Optional() bool {
	return true
}

func (k *KeyPercentageValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPercentageValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyPayload struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayload) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayload",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayload) LongName() string {
	return "payload"
}

func (k *KeyPayload) ShortName() string {
	return "pl"
}

func (k *KeyPayload) Optional() bool {
	return true
}

func (k *KeyPayload) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayload) Value2() (v string, ok bool) {
	return
}

type KeyPayloadArmAway struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadArmAway) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadArmAway",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadArmAway) LongName() string {
	return "payload_arm_away"
}

func (k *KeyPayloadArmAway) ShortName() string {
	return "pl_arm_away"
}

func (k *KeyPayloadArmAway) Optional() bool {
	return true
}

func (k *KeyPayloadArmAway) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadArmAway) Value2() (v string, ok bool) {
	return
}

type KeyPayloadArmCustomBypass struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadArmCustomBypass) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadArmCustomBypass",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadArmCustomBypass) LongName() string {
	return "payload_arm_custom_bypass"
}

func (k *KeyPayloadArmCustomBypass) ShortName() string {
	return "pl_arm_custom_b"
}

func (k *KeyPayloadArmCustomBypass) Optional() bool {
	return true
}

func (k *KeyPayloadArmCustomBypass) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadArmCustomBypass) Value2() (v string, ok bool) {
	return
}

type KeyPayloadArmHome struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadArmHome) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadArmHome",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadArmHome) LongName() string {
	return "payload_arm_home"
}

func (k *KeyPayloadArmHome) ShortName() string {
	return "pl_arm_home"
}

func (k *KeyPayloadArmHome) Optional() bool {
	return true
}

func (k *KeyPayloadArmHome) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadArmHome) Value2() (v string, ok bool) {
	return
}

type KeyPayloadArmNight struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadArmNight) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadArmNight",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadArmNight) LongName() string {
	return "payload_arm_night"
}

func (k *KeyPayloadArmNight) ShortName() string {
	return "pl_arm_nite"
}

func (k *KeyPayloadArmNight) Optional() bool {
	return true
}

func (k *KeyPayloadArmNight) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadArmNight) Value2() (v string, ok bool) {
	return
}

type KeyPayloadAvailable struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadAvailable) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadAvailable",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadAvailable) LongName() string {
	return "payload_available"
}

func (k *KeyPayloadAvailable) ShortName() string {
	return "pl_avail"
}

func (k *KeyPayloadAvailable) Optional() bool {
	return true
}

func (k *KeyPayloadAvailable) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadAvailable) Value2() (v string, ok bool) {
	return
}

type KeyPayloadCleanSpot struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadCleanSpot) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadCleanSpot",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadCleanSpot) LongName() string {
	return "payload_clean_spot"
}

func (k *KeyPayloadCleanSpot) ShortName() string {
	return "pl_cln_sp"
}

func (k *KeyPayloadCleanSpot) Optional() bool {
	return true
}

func (k *KeyPayloadCleanSpot) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadCleanSpot) Value2() (v string, ok bool) {
	return
}

type KeyPayloadClose struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadClose) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadClose",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadClose) LongName() string {
	return "payload_close"
}

func (k *KeyPayloadClose) ShortName() string {
	return "pl_cls"
}

func (k *KeyPayloadClose) Optional() bool {
	return true
}

func (k *KeyPayloadClose) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadClose) Value2() (v string, ok bool) {
	return
}

type KeyPayloadDisarm struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadDisarm) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadDisarm",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadDisarm) LongName() string {
	return "payload_disarm"
}

func (k *KeyPayloadDisarm) ShortName() string {
	return "pl_disarm"
}

func (k *KeyPayloadDisarm) Optional() bool {
	return true
}

func (k *KeyPayloadDisarm) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadDisarm) Value2() (v string, ok bool) {
	return
}

type KeyPayloadHome struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadHome) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadHome",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadHome) LongName() string {
	return "payload_home"
}

func (k *KeyPayloadHome) ShortName() string {
	return "pl_home"
}

func (k *KeyPayloadHome) Optional() bool {
	return true
}

func (k *KeyPayloadHome) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadHome) Value2() (v string, ok bool) {
	return
}

type KeyPayloadLocate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadLocate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadLocate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadLocate) LongName() string {
	return "payload_locate"
}

func (k *KeyPayloadLocate) ShortName() string {
	return "pl_loc"
}

func (k *KeyPayloadLocate) Optional() bool {
	return true
}

func (k *KeyPayloadLocate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadLocate) Value2() (v string, ok bool) {
	return
}

type KeyPayloadLock struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadLock) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadLock",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadLock) LongName() string {
	return "payload_lock"
}

func (k *KeyPayloadLock) ShortName() string {
	return "pl_lock"
}

func (k *KeyPayloadLock) Optional() bool {
	return true
}

func (k *KeyPayloadLock) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadLock) Value2() (v string, ok bool) {
	return
}

type KeyPayloadNotAvailable struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadNotAvailable) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadNotAvailable",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadNotAvailable) LongName() string {
	return "payload_not_available"
}

func (k *KeyPayloadNotAvailable) ShortName() string {
	return "pl_not_avail"
}

func (k *KeyPayloadNotAvailable) Optional() bool {
	return true
}

func (k *KeyPayloadNotAvailable) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadNotAvailable) Value2() (v string, ok bool) {
	return
}

type KeyPayloadNotHome struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadNotHome) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadNotHome",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadNotHome) LongName() string {
	return "payload_not_home"
}

func (k *KeyPayloadNotHome) ShortName() string {
	return "pl_not_home"
}

func (k *KeyPayloadNotHome) Optional() bool {
	return true
}

func (k *KeyPayloadNotHome) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadNotHome) Value2() (v string, ok bool) {
	return
}

type KeyPayloadOff struct {
	Val1    string
	Exists1 bool
	Val2    bool
	Exists2 bool
}

func (k *KeyPayloadOff) UnmarshalJSON(b []byte) error {
	return BiValueUnmarshaler[string, bool]{
		ValueUnmarshaler: ValueUnmarshaler[string]{
			Typename: "KeyPayloadOff",
			Value1:   &k.Val1,
			Exists1:  &k.Exists1,
		},
		Value2:  &k.Val2,
		Exists2: &k.Exists2,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadOff) LongName() string {
	return "payload_off"
}

func (k *KeyPayloadOff) ShortName() string {
	return "pl_off"
}

func (k *KeyPayloadOff) Optional() bool {
	return true
}

func (k *KeyPayloadOff) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadOff) Value2() (bool, bool) {
	return k.Val2, k.Exists2
}

type KeyPayloadOn struct {
	Val1    string
	Exists1 bool
	Val2    bool
	Exists2 bool
}

func (k *KeyPayloadOn) UnmarshalJSON(b []byte) error {
	return BiValueUnmarshaler[string, bool]{
		ValueUnmarshaler: ValueUnmarshaler[string]{
			Typename: "KeyPayloadOn",
			Value1:   &k.Val1,
			Exists1:  &k.Exists1,
		},
		Value2:  &k.Val2,
		Exists2: &k.Exists2,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadOn) LongName() string {
	return "payload_on"
}

func (k *KeyPayloadOn) ShortName() string {
	return "pl_on"
}

func (k *KeyPayloadOn) Optional() bool {
	return true
}

func (k *KeyPayloadOn) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadOn) Value2() (bool, bool) {
	return k.Val2, k.Exists2
}

type KeyPayloadOpen struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadOpen) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadOpen",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadOpen) LongName() string {
	return "payload_open"
}

func (k *KeyPayloadOpen) ShortName() string {
	return "pl_open"
}

func (k *KeyPayloadOpen) Optional() bool {
	return true
}

func (k *KeyPayloadOpen) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadOpen) Value2() (v string, ok bool) {
	return
}

type KeyPayloadOscillationOff struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadOscillationOff) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadOscillationOff",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadOscillationOff) LongName() string {
	return "payload_oscillation_off"
}

func (k *KeyPayloadOscillationOff) ShortName() string {
	return "pl_osc_off"
}

func (k *KeyPayloadOscillationOff) Optional() bool {
	return true
}

func (k *KeyPayloadOscillationOff) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadOscillationOff) Value2() (v string, ok bool) {
	return
}

type KeyPayloadOscillationOn struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadOscillationOn) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadOscillationOn",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadOscillationOn) LongName() string {
	return "payload_oscillation_on"
}

func (k *KeyPayloadOscillationOn) ShortName() string {
	return "pl_osc_on"
}

func (k *KeyPayloadOscillationOn) Optional() bool {
	return true
}

func (k *KeyPayloadOscillationOn) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadOscillationOn) Value2() (v string, ok bool) {
	return
}

type KeyPayloadPause struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadPause) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadPause",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadPause) LongName() string {
	return "payload_pause"
}

func (k *KeyPayloadPause) ShortName() string {
	return "pl_paus"
}

func (k *KeyPayloadPause) Optional() bool {
	return true
}

func (k *KeyPayloadPause) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadPause) Value2() (v string, ok bool) {
	return
}

type KeyPayloadReturnToBase struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadReturnToBase) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadReturnToBase",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadReturnToBase) LongName() string {
	return "payload_return_to_base"
}

func (k *KeyPayloadReturnToBase) ShortName() string {
	return "pl_ret"
}

func (k *KeyPayloadReturnToBase) Optional() bool {
	return true
}

func (k *KeyPayloadReturnToBase) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadReturnToBase) Value2() (v string, ok bool) {
	return
}

type KeyPayloadResetHumidity struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadResetHumidity) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadResetHumidity",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadResetHumidity) LongName() string {
	return "payload_reset_humidity"
}

func (k *KeyPayloadResetHumidity) ShortName() string {
	return "pl_rst_hum"
}

func (k *KeyPayloadResetHumidity) Optional() bool {
	return true
}

func (k *KeyPayloadResetHumidity) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadResetHumidity) Value2() (v string, ok bool) {
	return
}

type KeyPayloadResetMode struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadResetMode) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadResetMode",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadResetMode) LongName() string {
	return "payload_reset_mode"
}

func (k *KeyPayloadResetMode) ShortName() string {
	return "pl_rst_mode"
}

func (k *KeyPayloadResetMode) Optional() bool {
	return true
}

func (k *KeyPayloadResetMode) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadResetMode) Value2() (v string, ok bool) {
	return
}

type KeyPayloadResetPercentage struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadResetPercentage) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadResetPercentage",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadResetPercentage) LongName() string {
	return "payload_reset_percentage"
}

func (k *KeyPayloadResetPercentage) ShortName() string {
	return "pl_rst_pct"
}

func (k *KeyPayloadResetPercentage) Optional() bool {
	return true
}

func (k *KeyPayloadResetPercentage) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadResetPercentage) Value2() (v string, ok bool) {
	return
}

type KeyPayloadResetPresetMode struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadResetPresetMode) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadResetPresetMode",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadResetPresetMode) LongName() string {
	return "payload_reset_preset_mode"
}

func (k *KeyPayloadResetPresetMode) ShortName() string {
	return "pl_rst_pr_mode"
}

func (k *KeyPayloadResetPresetMode) Optional() bool {
	return true
}

func (k *KeyPayloadResetPresetMode) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadResetPresetMode) Value2() (v string, ok bool) {
	return
}

type KeyPayloadStop struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadStop) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadStop",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadStop) LongName() string {
	return "payload_stop"
}

func (k *KeyPayloadStop) ShortName() string {
	return "pl_stop"
}

func (k *KeyPayloadStop) Optional() bool {
	return true
}

func (k *KeyPayloadStop) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadStop) Value2() (v string, ok bool) {
	return
}

type KeyPayloadStartPause struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadStartPause) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadStartPause",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadStartPause) LongName() string {
	return "payload_start_pause"
}

func (k *KeyPayloadStartPause) ShortName() string {
	return "pl_stpa"
}

func (k *KeyPayloadStartPause) Optional() bool {
	return true
}

func (k *KeyPayloadStartPause) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadStartPause) Value2() (v string, ok bool) {
	return
}

type KeyPayloadStart struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadStart) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadStart",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadStart) LongName() string {
	return "payload_start"
}

func (k *KeyPayloadStart) ShortName() string {
	return "pl_strt"
}

func (k *KeyPayloadStart) Optional() bool {
	return true
}

func (k *KeyPayloadStart) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadStart) Value2() (v string, ok bool) {
	return
}

type KeyPayloadTurnOff struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadTurnOff) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadTurnOff",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadTurnOff) LongName() string {
	return "payload_turn_off"
}

func (k *KeyPayloadTurnOff) ShortName() string {
	return "pl_toff"
}

func (k *KeyPayloadTurnOff) Optional() bool {
	return true
}

func (k *KeyPayloadTurnOff) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadTurnOff) Value2() (v string, ok bool) {
	return
}

type KeyPayloadTurnOn struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadTurnOn) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadTurnOn",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadTurnOn) LongName() string {
	return "payload_turn_on"
}

func (k *KeyPayloadTurnOn) ShortName() string {
	return "pl_ton"
}

func (k *KeyPayloadTurnOn) Optional() bool {
	return true
}

func (k *KeyPayloadTurnOn) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadTurnOn) Value2() (v string, ok bool) {
	return
}

type KeyPayloadTrigger struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadTrigger) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadTrigger",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadTrigger) LongName() string {
	return "payload_trigger"
}

func (k *KeyPayloadTrigger) ShortName() string {
	return "pl_trig"
}

func (k *KeyPayloadTrigger) Optional() bool {
	return true
}

func (k *KeyPayloadTrigger) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadTrigger) Value2() (v string, ok bool) {
	return
}

type KeyPayloadUnlock struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPayloadUnlock) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPayloadUnlock",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadUnlock) LongName() string {
	return "payload_unlock"
}

func (k *KeyPayloadUnlock) ShortName() string {
	return "pl_unlk"
}

func (k *KeyPayloadUnlock) Optional() bool {
	return true
}

func (k *KeyPayloadUnlock) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadUnlock) Value2() (v string, ok bool) {
	return
}

type KeyPositionClosed struct {
	Val1    int
	Exists1 bool
}

func (k *KeyPositionClosed) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyPositionClosed",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPositionClosed) LongName() string {
	return "position_closed"
}

func (k *KeyPositionClosed) ShortName() string {
	return "pos_clsd"
}

func (k *KeyPositionClosed) Optional() bool {
	return true
}

func (k *KeyPositionClosed) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPositionClosed) Value2() (v int, ok bool) {
	return
}

type KeyPositionOpen struct {
	Val1    int
	Exists1 bool
}

func (k *KeyPositionOpen) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyPositionOpen",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPositionOpen) LongName() string {
	return "position_open"
}

func (k *KeyPositionOpen) ShortName() string {
	return "pos_open"
}

func (k *KeyPositionOpen) Optional() bool {
	return true
}

func (k *KeyPositionOpen) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPositionOpen) Value2() (v int, ok bool) {
	return
}

type KeyPositionTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPositionTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPositionTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPositionTopic) LongName() string {
	return "position_topic"
}

func (k *KeyPositionTopic) ShortName() string {
	return "pos_t"
}

func (k *KeyPositionTopic) Optional() bool {
	return true
}

func (k *KeyPositionTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPositionTopic) Value2() (v string, ok bool) {
	return
}

type KeyPositionTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPositionTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPositionTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPositionTemplate) LongName() string {
	return "position_template"
}

func (k *KeyPositionTemplate) ShortName() string {
	return "pos_tpl"
}

func (k *KeyPositionTemplate) Optional() bool {
	return true
}

func (k *KeyPositionTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPositionTemplate) Value2() (v string, ok bool) {
	return
}

type KeyPowerCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPowerCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPowerCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPowerCommandTopic) LongName() string {
	return "power_command_topic"
}

func (k *KeyPowerCommandTopic) ShortName() string {
	return "pow_cmd_t"
}

func (k *KeyPowerCommandTopic) Optional() bool {
	return true
}

func (k *KeyPowerCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPowerCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyPowerStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPowerStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPowerStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPowerStateTopic) LongName() string {
	return "power_state_topic"
}

func (k *KeyPowerStateTopic) ShortName() string {
	return "pow_stat_t"
}

func (k *KeyPowerStateTopic) Optional() bool {
	return true
}

func (k *KeyPowerStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPowerStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyPowerStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPowerStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPowerStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPowerStateTemplate) LongName() string {
	return "power_state_template"
}

func (k *KeyPowerStateTemplate) ShortName() string {
	return "pow_stat_tpl"
}

func (k *KeyPowerStateTemplate) Optional() bool {
	return true
}

func (k *KeyPowerStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPowerStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyPresetModeCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPresetModeCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPresetModeCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPresetModeCommandTopic) LongName() string {
	return "preset_mode_command_topic"
}

func (k *KeyPresetModeCommandTopic) ShortName() string {
	return "pr_mode_cmd_t"
}

func (k *KeyPresetModeCommandTopic) Optional() bool {
	return true
}

func (k *KeyPresetModeCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPresetModeCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyPresetModeCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPresetModeCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPresetModeCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPresetModeCommandTemplate) LongName() string {
	return "preset_mode_command_template"
}

func (k *KeyPresetModeCommandTemplate) ShortName() string {
	return "pr_mode_cmd_tpl"
}

func (k *KeyPresetModeCommandTemplate) Optional() bool {
	return true
}

func (k *KeyPresetModeCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPresetModeCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyPresetModeStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPresetModeStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPresetModeStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPresetModeStateTopic) LongName() string {
	return "preset_mode_state_topic"
}

func (k *KeyPresetModeStateTopic) ShortName() string {
	return "pr_mode_stat_t"
}

func (k *KeyPresetModeStateTopic) Optional() bool {
	return true
}

func (k *KeyPresetModeStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPresetModeStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyPresetModeValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPresetModeValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPresetModeValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPresetModeValueTemplate) LongName() string {
	return "preset_mode_value_template"
}

func (k *KeyPresetModeValueTemplate) ShortName() string {
	return "pr_mode_val_tpl"
}

func (k *KeyPresetModeValueTemplate) Optional() bool {
	return true
}

func (k *KeyPresetModeValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPresetModeValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyPresetModes struct {
	Val1    string
	Exists1 bool
}

func (k *KeyPresetModes) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyPresetModes",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPresetModes) LongName() string {
	return "preset_modes"
}

func (k *KeyPresetModes) ShortName() string {
	return "pr_modes"
}

func (k *KeyPresetModes) Optional() bool {
	return true
}

func (k *KeyPresetModes) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPresetModes) Value2() (v string, ok bool) {
	return
}

type KeyRedTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyRedTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyRedTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyRedTemplate) LongName() string {
	return "red_template"
}

func (k *KeyRedTemplate) ShortName() string {
	return "r_tpl"
}

func (k *KeyRedTemplate) Optional() bool {
	return true
}

func (k *KeyRedTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyRedTemplate) Value2() (v string, ok bool) {
	return
}

type KeyRetain struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyRetain) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyRetain",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyRetain) LongName() string {
	return "retain"
}

func (k *KeyRetain) ShortName() string {
	return "ret"
}

func (k *KeyRetain) Optional() bool {
	return true
}

func (k *KeyRetain) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyRetain) Value2() (v bool, ok bool) {
	return
}

type KeyRgbCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyRgbCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyRgbCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyRgbCommandTopic) LongName() string {
	return "rgb_command_topic"
}

func (k *KeyRgbCommandTopic) ShortName() string {
	return "rgb_cmd_t"
}

func (k *KeyRgbCommandTopic) Optional() bool {
	return true
}

func (k *KeyRgbCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyRgbCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyRgbCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyRgbCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyRgbCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyRgbCommandTemplate) LongName() string {
	return "rgb_command_template"
}

func (k *KeyRgbCommandTemplate) ShortName() string {
	return "rgb_cmd_tpl"
}

func (k *KeyRgbCommandTemplate) Optional() bool {
	return true
}

func (k *KeyRgbCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyRgbCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyRgbStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyRgbStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyRgbStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyRgbStateTopic) LongName() string {
	return "rgb_state_topic"
}

func (k *KeyRgbStateTopic) ShortName() string {
	return "rgb_stat_t"
}

func (k *KeyRgbStateTopic) Optional() bool {
	return true
}

func (k *KeyRgbStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyRgbStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyRgbValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyRgbValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyRgbValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyRgbValueTemplate) LongName() string {
	return "rgb_value_template"
}

func (k *KeyRgbValueTemplate) ShortName() string {
	return "rgb_val_tpl"
}

func (k *KeyRgbValueTemplate) Optional() bool {
	return true
}

func (k *KeyRgbValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyRgbValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeySuggestedArea struct {
	Val1    string
	Exists1 bool
}

func (k *KeySuggestedArea) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySuggestedArea",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySuggestedArea) LongName() string {
	return "suggested_area"
}

func (k *KeySuggestedArea) ShortName() string {
	return "sa"
}

func (k *KeySuggestedArea) Optional() bool {
	return true
}

func (k *KeySuggestedArea) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySuggestedArea) Value2() (v string, ok bool) {
	return
}

type KeySendCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeySendCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySendCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySendCommandTopic) LongName() string {
	return "send_command_topic"
}

func (k *KeySendCommandTopic) ShortName() string {
	return "send_cmd_t"
}

func (k *KeySendCommandTopic) Optional() bool {
	return true
}

func (k *KeySendCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySendCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeySendIfOff struct {
	Val1    bool
	Exists1 bool
}

func (k *KeySendIfOff) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeySendIfOff",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySendIfOff) LongName() string {
	return "send_if_off"
}

func (k *KeySendIfOff) ShortName() string {
	return "send_if_off"
}

func (k *KeySendIfOff) Optional() bool {
	return true
}

func (k *KeySendIfOff) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySendIfOff) Value2() (v bool, ok bool) {
	return
}

type KeySetFanSpeedTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeySetFanSpeedTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySetFanSpeedTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySetFanSpeedTopic) LongName() string {
	return "set_fan_speed_topic"
}

func (k *KeySetFanSpeedTopic) ShortName() string {
	return "set_fan_spd_t"
}

func (k *KeySetFanSpeedTopic) Optional() bool {
	return true
}

func (k *KeySetFanSpeedTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySetFanSpeedTopic) Value2() (v string, ok bool) {
	return
}

type KeySetPositionTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeySetPositionTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySetPositionTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySetPositionTopic) LongName() string {
	return "set_position_topic"
}

func (k *KeySetPositionTopic) ShortName() string {
	return "set_pos_t"
}

func (k *KeySetPositionTopic) Optional() bool {
	return true
}

func (k *KeySetPositionTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySetPositionTopic) Value2() (v string, ok bool) {
	return
}

type KeySetPositionTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeySetPositionTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySetPositionTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySetPositionTemplate) LongName() string {
	return "set_position_template"
}

func (k *KeySetPositionTemplate) ShortName() string {
	return "set_pos_tpl"
}

func (k *KeySetPositionTemplate) Optional() bool {
	return true
}

func (k *KeySetPositionTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySetPositionTemplate) Value2() (v string, ok bool) {
	return
}

type KeySpeedRangeMax struct {
	Val1    int
	Exists1 bool
}

func (k *KeySpeedRangeMax) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeySpeedRangeMax",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySpeedRangeMax) LongName() string {
	return "speed_range_max"
}

func (k *KeySpeedRangeMax) ShortName() string {
	return "spd_rng_max"
}

func (k *KeySpeedRangeMax) Optional() bool {
	return true
}

func (k *KeySpeedRangeMax) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySpeedRangeMax) Value2() (v int, ok bool) {
	return
}

type KeySpeedRangeMin struct {
	Val1    int
	Exists1 bool
}

func (k *KeySpeedRangeMin) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeySpeedRangeMin",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySpeedRangeMin) LongName() string {
	return "speed_range_min"
}

func (k *KeySpeedRangeMin) ShortName() string {
	return "spd_rng_min"
}

func (k *KeySpeedRangeMin) Optional() bool {
	return true
}

func (k *KeySpeedRangeMin) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySpeedRangeMin) Value2() (v int, ok bool) {
	return
}

type KeySourceType struct {
	Val1    string
	Exists1 bool
}

func (k *KeySourceType) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySourceType",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySourceType) LongName() string {
	return "source_type"
}

func (k *KeySourceType) ShortName() string {
	return "src_type"
}

func (k *KeySourceType) Optional() bool {
	return true
}

func (k *KeySourceType) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySourceType) Value2() (v string, ok bool) {
	return
}

type KeyStateClass struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateClass) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateClass",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateClass) LongName() string {
	return "state_class"
}

func (k *KeyStateClass) ShortName() string {
	return "stat_cla"
}

func (k *KeyStateClass) Optional() bool {
	return true
}

func (k *KeyStateClass) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateClass) Value2() (v string, ok bool) {
	return
}

type KeyStateClosing struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateClosing) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateClosing",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateClosing) LongName() string {
	return "state_closing"
}

func (k *KeyStateClosing) ShortName() string {
	return "stat_closing"
}

func (k *KeyStateClosing) Optional() bool {
	return true
}

func (k *KeyStateClosing) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateClosing) Value2() (v string, ok bool) {
	return
}

type KeyStateClosed struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateClosed) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateClosed",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateClosed) LongName() string {
	return "state_closed"
}

func (k *KeyStateClosed) ShortName() string {
	return "stat_clsd"
}

func (k *KeyStateClosed) Optional() bool {
	return true
}

func (k *KeyStateClosed) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateClosed) Value2() (v string, ok bool) {
	return
}

type KeyStateLocked struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateLocked) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateLocked",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateLocked) LongName() string {
	return "state_locked"
}

func (k *KeyStateLocked) ShortName() string {
	return "stat_locked"
}

func (k *KeyStateLocked) Optional() bool {
	return true
}

func (k *KeyStateLocked) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateLocked) Value2() (v string, ok bool) {
	return
}

type KeyStateOff struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateOff) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateOff",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateOff) LongName() string {
	return "state_off"
}

func (k *KeyStateOff) ShortName() string {
	return "stat_off"
}

func (k *KeyStateOff) Optional() bool {
	return true
}

func (k *KeyStateOff) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateOff) Value2() (v string, ok bool) {
	return
}

type KeyStateOn struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateOn) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateOn",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateOn) LongName() string {
	return "state_on"
}

func (k *KeyStateOn) ShortName() string {
	return "stat_on"
}

func (k *KeyStateOn) Optional() bool {
	return true
}

func (k *KeyStateOn) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateOn) Value2() (v string, ok bool) {
	return
}

type KeyStateOpen struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateOpen) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateOpen",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateOpen) LongName() string {
	return "state_open"
}

func (k *KeyStateOpen) ShortName() string {
	return "stat_open"
}

func (k *KeyStateOpen) Optional() bool {
	return true
}

func (k *KeyStateOpen) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateOpen) Value2() (v string, ok bool) {
	return
}

type KeyStateOpening struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateOpening) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateOpening",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateOpening) LongName() string {
	return "state_opening"
}

func (k *KeyStateOpening) ShortName() string {
	return "stat_opening"
}

func (k *KeyStateOpening) Optional() bool {
	return true
}

func (k *KeyStateOpening) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateOpening) Value2() (v string, ok bool) {
	return
}

type KeyStateStopped struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateStopped) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateStopped",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateStopped) LongName() string {
	return "state_stopped"
}

func (k *KeyStateStopped) ShortName() string {
	return "stat_stopped"
}

func (k *KeyStateStopped) Optional() bool {
	return true
}

func (k *KeyStateStopped) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateStopped) Value2() (v string, ok bool) {
	return
}

type KeyStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateTopic) LongName() string {
	return "state_topic"
}

func (k *KeyStateTopic) ShortName() string {
	return "stat_t"
}

func (k *KeyStateTopic) Optional() bool {
	return false
}

func (k *KeyStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyStateTopicOptional struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateTopicOptional) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateTopicOptional",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateTopicOptional) LongName() string {
	return "state_topic"
}

func (k *KeyStateTopicOptional) ShortName() string {
	return "stat_t"
}

func (k *KeyStateTopicOptional) Optional() bool {
	return true
}

func (k *KeyStateTopicOptional) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateTopicOptional) Value2() (v string, ok bool) {
	return
}

type KeyStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateTemplate) LongName() string {
	return "state_template"
}

func (k *KeyStateTemplate) ShortName() string {
	return "stat_tpl"
}

func (k *KeyStateTemplate) Optional() bool {
	return true
}

func (k *KeyStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyStateUnlocked struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateUnlocked) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateUnlocked",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateUnlocked) LongName() string {
	return "state_unlocked"
}

func (k *KeyStateUnlocked) ShortName() string {
	return "stat_unlocked"
}

func (k *KeyStateUnlocked) Optional() bool {
	return true
}

func (k *KeyStateUnlocked) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateUnlocked) Value2() (v string, ok bool) {
	return
}

type KeyStateValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyStateValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyStateValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyStateValueTemplate) LongName() string {
	return "state_value_template"
}

func (k *KeyStateValueTemplate) ShortName() string {
	return "stat_val_tpl"
}

func (k *KeyStateValueTemplate) Optional() bool {
	return true
}

func (k *KeyStateValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyStateValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeySubtype struct {
	Val1    string
	Exists1 bool
}

func (k *KeySubtype) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySubtype",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySubtype) LongName() string {
	return "subtype"
}

func (k *KeySubtype) ShortName() string {
	return "stype"
}

func (k *KeySubtype) Optional() bool {
	return false
}

func (k *KeySubtype) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySubtype) Value2() (v string, ok bool) {
	return
}

type KeySupportDuration struct {
	Val1    bool
	Exists1 bool
}

func (k *KeySupportDuration) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeySupportDuration",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySupportDuration) LongName() string {
	return "support_duration"
}

func (k *KeySupportDuration) ShortName() string {
	return "sup_duration"
}

func (k *KeySupportDuration) Optional() bool {
	return true
}

func (k *KeySupportDuration) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySupportDuration) Value2() (v bool, ok bool) {
	return
}

type KeySupportedFeatures struct {
	Val1    string
	Exists1 bool
	Val2    []string
	Exists2 bool
}

func (k *KeySupportedFeatures) UnmarshalJSON(b []byte) error {
	return BiValueUnmarshaler[string, []string]{
		ValueUnmarshaler: ValueUnmarshaler[string]{
			Typename: "KeySupportedFeatures",
			Value1:   &k.Val1,
			Exists1:  &k.Exists1,
		},
		Value2:  &k.Val2,
		Exists2: &k.Exists2,
	}.UnmarshalJSON(b)
}

func (k *KeySupportedFeatures) LongName() string {
	return "supported_features"
}

func (k *KeySupportedFeatures) ShortName() string {
	return "sup_feat"
}

func (k *KeySupportedFeatures) Optional() bool {
	return true
}

func (k *KeySupportedFeatures) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySupportedFeatures) Value2() ([]string, bool) {
	return k.Val2, k.Exists2
}

type KeySupportedTurnOff struct {
	Val1    bool
	Exists1 bool
}

func (k *KeySupportedTurnOff) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeySupportedTurnOff",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySupportedTurnOff) LongName() string {
	return "supported_turn_off"
}

func (k *KeySupportedTurnOff) ShortName() string {
	return "sup_off"
}

func (k *KeySupportedTurnOff) Optional() bool {
	return true
}

func (k *KeySupportedTurnOff) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySupportedTurnOff) Value2() (v bool, ok bool) {
	return
}

type KeySupportVolumeSet struct {
	Val1    bool
	Exists1 bool
}

func (k *KeySupportVolumeSet) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeySupportVolumeSet",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySupportVolumeSet) LongName() string {
	return "support_volume_set"
}

func (k *KeySupportVolumeSet) ShortName() string {
	return "sup_vol"
}

func (k *KeySupportVolumeSet) Optional() bool {
	return true
}

func (k *KeySupportVolumeSet) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySupportVolumeSet) Value2() (v bool, ok bool) {
	return
}

type KeySwVersion struct {
	Val1    string
	Exists1 bool
}

func (k *KeySwVersion) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySwVersion",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySwVersion) LongName() string {
	return "sw_version"
}

func (k *KeySwVersion) ShortName() string {
	return "sw"
}

func (k *KeySwVersion) Optional() bool {
	return true
}

func (k *KeySwVersion) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySwVersion) Value2() (v string, ok bool) {
	return
}

type KeySwingModeCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeySwingModeCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySwingModeCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySwingModeCommandTopic) LongName() string {
	return "swing_mode_command_topic"
}

func (k *KeySwingModeCommandTopic) ShortName() string {
	return "swing_mode_cmd_t"
}

func (k *KeySwingModeCommandTopic) Optional() bool {
	return true
}

func (k *KeySwingModeCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySwingModeCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeySwingModeCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeySwingModeCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySwingModeCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySwingModeCommandTemplate) LongName() string {
	return "swing_mode_command_template"
}

func (k *KeySwingModeCommandTemplate) ShortName() string {
	return "swing_mode_cmd_tpl"
}

func (k *KeySwingModeCommandTemplate) Optional() bool {
	return true
}

func (k *KeySwingModeCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySwingModeCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeySwingModeStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeySwingModeStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySwingModeStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySwingModeStateTopic) LongName() string {
	return "swing_mode_state_topic"
}

func (k *KeySwingModeStateTopic) ShortName() string {
	return "swing_mode_stat_t"
}

func (k *KeySwingModeStateTopic) Optional() bool {
	return true
}

func (k *KeySwingModeStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySwingModeStateTopic) Value2() (v string, ok bool) {
	return
}

type KeySwingModeStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeySwingModeStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeySwingModeStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeySwingModeStateTemplate) LongName() string {
	return "swing_mode_state_template"
}

func (k *KeySwingModeStateTemplate) ShortName() string {
	return "swing_mode_stat_tpl"
}

func (k *KeySwingModeStateTemplate) Optional() bool {
	return true
}

func (k *KeySwingModeStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeySwingModeStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTopic) LongName() string {
	return "topic"
}

func (k *KeyTopic) ShortName() string {
	return "t"
}

func (k *KeyTopic) Optional() bool {
	return false
}

func (k *KeyTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTopic) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureCommandTopic) LongName() string {
	return "temperature_command_topic"
}

func (k *KeyTemperatureCommandTopic) ShortName() string {
	return "temp_cmd_t"
}

func (k *KeyTemperatureCommandTopic) Optional() bool {
	return true
}

func (k *KeyTemperatureCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureCommandTemplate) LongName() string {
	return "temperature_command_template"
}

func (k *KeyTemperatureCommandTemplate) ShortName() string {
	return "temp_cmd_tpl"
}

func (k *KeyTemperatureCommandTemplate) Optional() bool {
	return true
}

func (k *KeyTemperatureCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureHighCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureHighCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureHighCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureHighCommandTopic) LongName() string {
	return "temperature_high_command_topic"
}

func (k *KeyTemperatureHighCommandTopic) ShortName() string {
	return "temp_hi_cmd_t"
}

func (k *KeyTemperatureHighCommandTopic) Optional() bool {
	return true
}

func (k *KeyTemperatureHighCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureHighCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureHighCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureHighCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureHighCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureHighCommandTemplate) LongName() string {
	return "temperature_high_command_template"
}

func (k *KeyTemperatureHighCommandTemplate) ShortName() string {
	return "temp_hi_cmd_tpl"
}

func (k *KeyTemperatureHighCommandTemplate) Optional() bool {
	return true
}

func (k *KeyTemperatureHighCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureHighCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureHighStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureHighStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureHighStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureHighStateTopic) LongName() string {
	return "temperature_high_state_topic"
}

func (k *KeyTemperatureHighStateTopic) ShortName() string {
	return "temp_hi_stat_t"
}

func (k *KeyTemperatureHighStateTopic) Optional() bool {
	return true
}

func (k *KeyTemperatureHighStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureHighStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureHighStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureHighStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureHighStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureHighStateTemplate) LongName() string {
	return "temperature_high_state_template"
}

func (k *KeyTemperatureHighStateTemplate) ShortName() string {
	return "temp_hi_stat_tpl"
}

func (k *KeyTemperatureHighStateTemplate) Optional() bool {
	return true
}

func (k *KeyTemperatureHighStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureHighStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureLowCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureLowCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureLowCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureLowCommandTopic) LongName() string {
	return "temperature_low_command_topic"
}

func (k *KeyTemperatureLowCommandTopic) ShortName() string {
	return "temp_lo_cmd_t"
}

func (k *KeyTemperatureLowCommandTopic) Optional() bool {
	return true
}

func (k *KeyTemperatureLowCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureLowCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureLowCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureLowCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureLowCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureLowCommandTemplate) LongName() string {
	return "temperature_low_command_template"
}

func (k *KeyTemperatureLowCommandTemplate) ShortName() string {
	return "temp_lo_cmd_tpl"
}

func (k *KeyTemperatureLowCommandTemplate) Optional() bool {
	return true
}

func (k *KeyTemperatureLowCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureLowCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureLowStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureLowStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureLowStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureLowStateTopic) LongName() string {
	return "temperature_low_state_topic"
}

func (k *KeyTemperatureLowStateTopic) ShortName() string {
	return "temp_lo_stat_t"
}

func (k *KeyTemperatureLowStateTopic) Optional() bool {
	return true
}

func (k *KeyTemperatureLowStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureLowStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureLowStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureLowStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureLowStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureLowStateTemplate) LongName() string {
	return "temperature_low_state_template"
}

func (k *KeyTemperatureLowStateTemplate) ShortName() string {
	return "temp_lo_stat_tpl"
}

func (k *KeyTemperatureLowStateTemplate) Optional() bool {
	return true
}

func (k *KeyTemperatureLowStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureLowStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureStateTopic) LongName() string {
	return "temperature_state_topic"
}

func (k *KeyTemperatureStateTopic) ShortName() string {
	return "temp_stat_t"
}

func (k *KeyTemperatureStateTopic) Optional() bool {
	return true
}

func (k *KeyTemperatureStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureStateTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureStateTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureStateTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureStateTemplate) LongName() string {
	return "temperature_state_template"
}

func (k *KeyTemperatureStateTemplate) ShortName() string {
	return "temp_stat_tpl"
}

func (k *KeyTemperatureStateTemplate) Optional() bool {
	return true
}

func (k *KeyTemperatureStateTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureStateTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTemperatureUnit struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTemperatureUnit) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTemperatureUnit",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTemperatureUnit) LongName() string {
	return "temperature_unit"
}

func (k *KeyTemperatureUnit) ShortName() string {
	return "temp_unit"
}

func (k *KeyTemperatureUnit) Optional() bool {
	return true
}

func (k *KeyTemperatureUnit) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTemperatureUnit) Value2() (v string, ok bool) {
	return
}

type KeyTiltClosedValue struct {
	Val1    int
	Exists1 bool
}

func (k *KeyTiltClosedValue) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyTiltClosedValue",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltClosedValue) LongName() string {
	return "tilt_closed_value"
}

func (k *KeyTiltClosedValue) ShortName() string {
	return "tilt_clsd_val"
}

func (k *KeyTiltClosedValue) Optional() bool {
	return true
}

func (k *KeyTiltClosedValue) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltClosedValue) Value2() (v int, ok bool) {
	return
}

type KeyTiltCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTiltCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTiltCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltCommandTopic) LongName() string {
	return "tilt_command_topic"
}

func (k *KeyTiltCommandTopic) ShortName() string {
	return "tilt_cmd_t"
}

func (k *KeyTiltCommandTopic) Optional() bool {
	return true
}

func (k *KeyTiltCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyTiltCommandTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTiltCommandTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTiltCommandTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltCommandTemplate) LongName() string {
	return "tilt_command_template"
}

func (k *KeyTiltCommandTemplate) ShortName() string {
	return "tilt_cmd_tpl"
}

func (k *KeyTiltCommandTemplate) Optional() bool {
	return true
}

func (k *KeyTiltCommandTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltCommandTemplate) Value2() (v string, ok bool) {
	return
}

type KeyTiltInvertState struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyTiltInvertState) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyTiltInvertState",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltInvertState) LongName() string {
	return "tilt_invert_state"
}

func (k *KeyTiltInvertState) ShortName() string {
	return "tilt_inv_stat"
}

func (k *KeyTiltInvertState) Optional() bool {
	return true
}

func (k *KeyTiltInvertState) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltInvertState) Value2() (v bool, ok bool) {
	return
}

type KeyTiltMax struct {
	Val1    int
	Exists1 bool
}

func (k *KeyTiltMax) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyTiltMax",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltMax) LongName() string {
	return "tilt_max"
}

func (k *KeyTiltMax) ShortName() string {
	return "tilt_max"
}

func (k *KeyTiltMax) Optional() bool {
	return true
}

func (k *KeyTiltMax) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltMax) Value2() (v int, ok bool) {
	return
}

type KeyTiltMin struct {
	Val1    int
	Exists1 bool
}

func (k *KeyTiltMin) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyTiltMin",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltMin) LongName() string {
	return "tilt_min"
}

func (k *KeyTiltMin) ShortName() string {
	return "tilt_min"
}

func (k *KeyTiltMin) Optional() bool {
	return true
}

func (k *KeyTiltMin) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltMin) Value2() (v int, ok bool) {
	return
}

type KeyTiltOpenedValue struct {
	Val1    int
	Exists1 bool
}

func (k *KeyTiltOpenedValue) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyTiltOpenedValue",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltOpenedValue) LongName() string {
	return "tilt_opened_value"
}

func (k *KeyTiltOpenedValue) ShortName() string {
	return "tilt_opnd_val"
}

func (k *KeyTiltOpenedValue) Optional() bool {
	return true
}

func (k *KeyTiltOpenedValue) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltOpenedValue) Value2() (v int, ok bool) {
	return
}

type KeyTiltOptimistic struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyTiltOptimistic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyTiltOptimistic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltOptimistic) LongName() string {
	return "tilt_optimistic"
}

func (k *KeyTiltOptimistic) ShortName() string {
	return "tilt_opt"
}

func (k *KeyTiltOptimistic) Optional() bool {
	return true
}

func (k *KeyTiltOptimistic) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltOptimistic) Value2() (v bool, ok bool) {
	return
}

type KeyTiltStatusTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTiltStatusTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTiltStatusTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltStatusTopic) LongName() string {
	return "tilt_status_topic"
}

func (k *KeyTiltStatusTopic) ShortName() string {
	return "tilt_status_t"
}

func (k *KeyTiltStatusTopic) Optional() bool {
	return true
}

func (k *KeyTiltStatusTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltStatusTopic) Value2() (v string, ok bool) {
	return
}

type KeyTiltStatusTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyTiltStatusTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyTiltStatusTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyTiltStatusTemplate) LongName() string {
	return "tilt_status_template"
}

func (k *KeyTiltStatusTemplate) ShortName() string {
	return "tilt_status_tpl"
}

func (k *KeyTiltStatusTemplate) Optional() bool {
	return true
}

func (k *KeyTiltStatusTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyTiltStatusTemplate) Value2() (v string, ok bool) {
	return
}

type KeyUniqueId struct {
	Val1    string
	Exists1 bool
}

func (k *KeyUniqueId) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyUniqueId",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyUniqueId) LongName() string {
	return "unique_id"
}

func (k *KeyUniqueId) ShortName() string {
	return "uniq_id"
}

func (k *KeyUniqueId) Optional() bool {
	return true
}

func (k *KeyUniqueId) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyUniqueId) Value2() (v string, ok bool) {
	return
}

type KeyUnitOfMeasurement struct {
	Val1    string
	Exists1 bool
}

func (k *KeyUnitOfMeasurement) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyUnitOfMeasurement",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyUnitOfMeasurement) LongName() string {
	return "unit_of_measurement"
}

func (k *KeyUnitOfMeasurement) ShortName() string {
	return "unit_of_meas"
}

func (k *KeyUnitOfMeasurement) Optional() bool {
	return true
}

func (k *KeyUnitOfMeasurement) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyUnitOfMeasurement) Value2() (v string, ok bool) {
	return
}

type KeyValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyValueTemplate) LongName() string {
	return "value_template"
}

func (k *KeyValueTemplate) ShortName() string {
	return "val_tpl"
}

func (k *KeyValueTemplate) Optional() bool {
	return true
}

func (k *KeyValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyWhiteValueCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyWhiteValueCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyWhiteValueCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyWhiteValueCommandTopic) LongName() string {
	return "white_value_command_topic"
}

func (k *KeyWhiteValueCommandTopic) ShortName() string {
	return "whit_val_cmd_t"
}

func (k *KeyWhiteValueCommandTopic) Optional() bool {
	return true
}

func (k *KeyWhiteValueCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyWhiteValueCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyWhiteValueScale struct {
	Val1    int
	Exists1 bool
}

func (k *KeyWhiteValueScale) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[int]{
		Typename: "KeyWhiteValueScale",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyWhiteValueScale) LongName() string {
	return "white_value_scale"
}

func (k *KeyWhiteValueScale) ShortName() string {
	return "whit_val_scl"
}

func (k *KeyWhiteValueScale) Optional() bool {
	return true
}

func (k *KeyWhiteValueScale) Value() (int, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyWhiteValueScale) Value2() (v int, ok bool) {
	return
}

type KeyWhiteValueStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyWhiteValueStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyWhiteValueStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyWhiteValueStateTopic) LongName() string {
	return "white_value_state_topic"
}

func (k *KeyWhiteValueStateTopic) ShortName() string {
	return "whit_val_stat_t"
}

func (k *KeyWhiteValueStateTopic) Optional() bool {
	return true
}

func (k *KeyWhiteValueStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyWhiteValueStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyWhiteValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyWhiteValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyWhiteValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyWhiteValueTemplate) LongName() string {
	return "white_value_template"
}

func (k *KeyWhiteValueTemplate) ShortName() string {
	return "whit_val_tpl"
}

func (k *KeyWhiteValueTemplate) Optional() bool {
	return true
}

func (k *KeyWhiteValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyWhiteValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyXyCommandTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyXyCommandTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyXyCommandTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyXyCommandTopic) LongName() string {
	return "xy_command_topic"
}

func (k *KeyXyCommandTopic) ShortName() string {
	return "xy_cmd_t"
}

func (k *KeyXyCommandTopic) Optional() bool {
	return true
}

func (k *KeyXyCommandTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyXyCommandTopic) Value2() (v string, ok bool) {
	return
}

type KeyXyStateTopic struct {
	Val1    string
	Exists1 bool
}

func (k *KeyXyStateTopic) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyXyStateTopic",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyXyStateTopic) LongName() string {
	return "xy_state_topic"
}

func (k *KeyXyStateTopic) ShortName() string {
	return "xy_stat_t"
}

func (k *KeyXyStateTopic) Optional() bool {
	return true
}

func (k *KeyXyStateTopic) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyXyStateTopic) Value2() (v string, ok bool) {
	return
}

type KeyXyValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyXyValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyXyValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyXyValueTemplate) LongName() string {
	return "xy_value_template"
}

func (k *KeyXyValueTemplate) ShortName() string {
	return "xy_val_tpl"
}

func (k *KeyXyValueTemplate) Optional() bool {
	return true
}

func (k *KeyXyValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyXyValueTemplate) Value2() (v string, ok bool) {
	return
}

type KeyViaDevice struct {
	Val1    string
	Exists1 bool
}

func (k *KeyViaDevice) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyViaDevice",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyViaDevice) LongName() string {
	return "via_device"
}

func (k *KeyViaDevice) ShortName() string {
	return "via_device"
}

func (k *KeyViaDevice) Optional() bool {
	return true
}

func (k *KeyViaDevice) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyViaDevice) Value2() (v string, ok bool) {
	return
}

type KeyQos struct {
	Val1    byte
	Exists1 bool
}

func (k *KeyQos) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[byte]{
		Typename: "KeyQos",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyQos) LongName() string {
	return "qos"
}

func (k *KeyQos) ShortName() string {
	return "qos"
}

func (k *KeyQos) Optional() bool {
	return true
}

func (k *KeyQos) Value() (byte, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyQos) Value2() (v byte, ok bool) {
	return
}

type KeyType struct {
	Val1    string
	Exists1 bool
}

func (k *KeyType) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyType",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyType) LongName() string {
	return "type"
}

func (k *KeyType) ShortName() string {
	return "type"
}

func (k *KeyType) Optional() bool {
	return false
}

func (k *KeyType) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyType) Value2() (v string, ok bool) {
	return
}

type KeyEnabledByDefault struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyEnabledByDefault) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyEnabledByDefault",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyEnabledByDefault) LongName() string {
	return "enabled_by_default"
}

func (k *KeyEnabledByDefault) ShortName() string {
	return "enabled_by_default"
}

func (k *KeyEnabledByDefault) Optional() bool {
	return true
}

func (k *KeyEnabledByDefault) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyEnabledByDefault) Value2() (v bool, ok bool) {
	return
}

type KeyPayloadPress struct {
	Val1    bool
	Exists1 bool
}

func (k *KeyPayloadPress) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[bool]{
		Typename: "KeyPayloadPress",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyPayloadPress) LongName() string {
	return "payload_press"
}

func (k *KeyPayloadPress) ShortName() string {
	return "payload_press"
}

func (k *KeyPayloadPress) Optional() bool {
	return true
}

func (k *KeyPayloadPress) Value() (bool, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyPayloadPress) Value2() (v bool, ok bool) {
	return
}

type KeyNameBinarySensor struct {
	Val1    string
	Exists1 bool
}

func (k *KeyNameBinarySensor) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyNameBinarySensor",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyNameBinarySensor) LongName() string {
	return "name"
}

func (k *KeyNameBinarySensor) ShortName() string {
	return "name"
}

func (k *KeyNameBinarySensor) Optional() bool {
	return true
}

func (k *KeyNameBinarySensor) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyNameBinarySensor) Value2() (v string, ok bool) {
	return
}

type KeyNameSensor struct {
	Val1    string
	Exists1 bool
}

func (k *KeyNameSensor) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyNameSensor",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyNameSensor) LongName() string {
	return "name"
}

func (k *KeyNameSensor) ShortName() string {
	return "name"
}

func (k *KeyNameSensor) Optional() bool {
	return true
}

func (k *KeyNameSensor) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyNameSensor) Value2() (v string, ok bool) {
	return
}

type KeyDeviceRequired struct {
	Val1    ValueDevice
	Exists1 bool
}

func (k *KeyDeviceRequired) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[ValueDevice]{
		Typename: "KeyDeviceRequired",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyDeviceRequired) LongName() string {
	return "device"
}

func (k *KeyDeviceRequired) ShortName() string {
	return "dev"
}

func (k *KeyDeviceRequired) Optional() bool {
	return false
}

func (k *KeyDeviceRequired) Value() (ValueDevice, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyDeviceRequired) Value2() (v ValueDevice, ok bool) {
	return
}

type KeyNameButton struct {
	Val1    string
	Exists1 bool
}

func (k *KeyNameButton) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyNameButton",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyNameButton) LongName() string {
	return "name"
}

func (k *KeyNameButton) ShortName() string {
	return "name"
}

func (k *KeyNameButton) Optional() bool {
	return true
}

func (k *KeyNameButton) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyNameButton) Value2() (v string, ok bool) {
	return
}

type KeyLastResetValueTemplate struct {
	Val1    string
	Exists1 bool
}

func (k *KeyLastResetValueTemplate) UnmarshalJSON(b []byte) error {
	return ValueUnmarshaler[string]{
		Typename: "KeyLastResetValueTemplate",
		Value1:   &k.Val1,
		Exists1:  &k.Exists1,
	}.UnmarshalJSON(b)
}

func (k *KeyLastResetValueTemplate) LongName() string {
	return "last_reset_value_template"
}

func (k *KeyLastResetValueTemplate) ShortName() string {
	return "last_reset_value_template"
}

func (k *KeyLastResetValueTemplate) Optional() bool {
	return true
}

func (k *KeyLastResetValueTemplate) Value() (string, bool) {
	return k.Val1, k.Exists1
}

func (k *KeyLastResetValueTemplate) Value2() (v string, ok bool) {
	return
}
